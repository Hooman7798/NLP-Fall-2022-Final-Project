{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nJkZLxModChc",
        "outputId": "8e2f775c-920e-47d6-fe4a-174c591656eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cd /content/drive/My Drive"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "saO66J2VdjNW",
        "outputId": "061dfed1-ee30-4191-a443-c79fce1fb4dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install vaderSentiment"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fBS5n4GxJXlr",
        "outputId": "a046024b-ef4a-4545-f80d-ef31d7850920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting vaderSentiment\n",
            "  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/126.0 KB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 KB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from vaderSentiment) (2.25.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->vaderSentiment) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->vaderSentiment) (2022.12.7)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->vaderSentiment) (4.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->vaderSentiment) (2.10)\n",
            "Installing collected packages: vaderSentiment\n",
            "Successfully installed vaderSentiment-3.3.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import nltk\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "from wordcloud import WordCloud, STOPWORDS\n",
        "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
        "from collections import Counter\n",
        "from nltk.corpus import stopwords\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import Normalizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "LdkGi5uNhgJO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout\n",
        "from keras.utils import np_utils\n",
        "from sklearn.metrics import classification_report\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
        "from sklearn.metrics import classification_report\n",
        "from keras.utils import pad_sequences\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.layers import Activation, Dropout, Dense,Embedding,SpatialDropout1D,LSTM"
      ],
      "metadata": {
        "id": "zmTDSxLBUbsl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nltk.download('stopwords')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GNeECmJNZBuV",
        "outputId": "9ba23a08-6880-4b32-ec8c-30e6afd5be2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_excel('Asian Airlines Reviews.xlsx')"
      ],
      "metadata": {
        "id": "lUVG5fGjhRth"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qx628aOVhm3G",
        "outputId": "ce2d1f43-d2bc-40e5-cfb6-3aaf9bb1bd6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  airline_name                      link                  author  \\\n",
              "0      airasia  /airline-reviews/airasia         Sotheareach Sok   \n",
              "1      airasia  /airline-reviews/airasia           Thomas Jellis   \n",
              "2      airasia  /airline-reviews/airasia            Zhivko Kulev   \n",
              "3      airasia  /airline-reviews/airasia                S Altham   \n",
              "4      airasia  /airline-reviews/airasia              Peter Tong   \n",
              "5      airasia  /airline-reviews/airasia          Nitin Aggarwal   \n",
              "6      airasia  /airline-reviews/airasia                C Memoli   \n",
              "7      airasia  /airline-reviews/airasia                N Preeti   \n",
              "8      airasia  /airline-reviews/airasia  Ranganathan Manikandan   \n",
              "9      airasia  /airline-reviews/airasia               N Schöbel   \n",
              "\n",
              "   author_country       date  \\\n",
              "0        Cambodia 2015-07-22   \n",
              "1  United Kingdom 2015-07-22   \n",
              "2        Bulgaria 2015-07-21   \n",
              "3       Australia 2015-06-28   \n",
              "4       Indonesia 2015-06-22   \n",
              "5           India 2015-06-04   \n",
              "6   United States 2015-05-05   \n",
              "7           India 2015-05-04   \n",
              "8           India 2015-04-10   \n",
              "9         Germany 2015-04-08   \n",
              "\n",
              "                                             content cabin_flown  \\\n",
              "0  The flight was very pleasant. I enjoyed it but...     Economy   \n",
              "1  I flew to Kuala Lumpur and back and hated both...     Economy   \n",
              "2  June 2015 I went on a small trip around Asia a...     Economy   \n",
              "3  This was our first AirAsia trip from Perth to ...     Economy   \n",
              "4  Flew AirAsia from Jakarta to Bali and overall ...     Economy   \n",
              "5  Air Asia India: Traveled from Delhi to Bangalo...     Economy   \n",
              "6  Flew Bangkok to Bali then Bali to Singapore. P...     Economy   \n",
              "7  Round-trip from Goa to Bangalore on 29 April 2...     Economy   \n",
              "8  TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...     Economy   \n",
              "9  Flew recently from Denpasar to Kuala Lumpur. F...     Economy   \n",
              "\n",
              "   seat_comfort_rating  overall_rating  inflight_entertainment_rating  \\\n",
              "0                  3.0             8.0                            1.0   \n",
              "1                  1.0             3.0                            NaN   \n",
              "2                  5.0            10.0                            5.0   \n",
              "3                  3.0             8.0                            NaN   \n",
              "4                  4.0             8.0                            NaN   \n",
              "5                  1.0             1.0                            1.0   \n",
              "6                  4.0             9.0                            2.0   \n",
              "7                  4.0             8.0                            1.0   \n",
              "8                  4.0             7.0                            1.0   \n",
              "9                  1.0             1.0                            1.0   \n",
              "\n",
              "   food_beverages_rating  recommended  \n",
              "0                    1.0          1.0  \n",
              "1                    NaN          0.0  \n",
              "2                    4.0          1.0  \n",
              "3                    NaN          1.0  \n",
              "4                    NaN          1.0  \n",
              "5                    1.0          0.0  \n",
              "6                    4.0          1.0  \n",
              "7                    3.0          1.0  \n",
              "8                    1.0          1.0  \n",
              "9                    1.0          0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d481d36-7c07-4433-9bd0-e3272aa5ce51\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_name</th>\n",
              "      <th>link</th>\n",
              "      <th>author</th>\n",
              "      <th>author_country</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>cabin_flown</th>\n",
              "      <th>seat_comfort_rating</th>\n",
              "      <th>overall_rating</th>\n",
              "      <th>inflight_entertainment_rating</th>\n",
              "      <th>food_beverages_rating</th>\n",
              "      <th>recommended</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Sotheareach Sok</td>\n",
              "      <td>Cambodia</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Thomas Jellis</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Zhivko Kulev</td>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>2015-07-21</td>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>S Altham</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-06-28</td>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Peter Tong</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2015-06-22</td>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Nitin Aggarwal</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-06-04</td>\n",
              "      <td>Air Asia India: Traveled from Delhi to Bangalo...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>C Memoli</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>Flew Bangkok to Bali then Bali to Singapore. P...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Preeti</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-05-04</td>\n",
              "      <td>Round-trip from Goa to Bangalore on 29 April 2...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Ranganathan Manikandan</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-04-10</td>\n",
              "      <td>TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Schöbel</td>\n",
              "      <td>Germany</td>\n",
              "      <td>2015-04-08</td>\n",
              "      <td>Flew recently from Denpasar to Kuala Lumpur. F...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d481d36-7c07-4433-9bd0-e3272aa5ce51')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2d481d36-7c07-4433-9bd0-e3272aa5ce51 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2d481d36-7c07-4433-9bd0-e3272aa5ce51');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['content'] = data['content'].replace('wi\\\\-fi','wifi', regex=True)\n",
        "data['content'] = data['content'].replace('flights','flight', regex=True)\n",
        "data['content'] = data['content'].replace('airlines','airline', regex=True)\n",
        "data['content'] = data['content'].replace('kong','hongkong', regex=True)\n",
        "data['content'] = data['content'].replace('hours','hour', regex=True)\n",
        "data['content'] = data['content'].replace('seats','seat', regex=True)\n",
        "data['content'] = data['content'].replace('meals','meal', regex=True)\n",
        "data['content'] = data['content'].replace('ife','life', regex=True)"
      ],
      "metadata": {
        "id": "NN3Y7hn0awbG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['content'][0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "9wSRFrcKIaBG",
        "outputId": "63ad9da6-1d07-4c8e-e39b-b7e8fc84f52c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'The flight was very pleasant. I enjoyed it but AirAsia should consider add the in-flight entertainment packages to the flight.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['content'][4969]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "FrLHqxLdSHQA",
        "outputId": "71fe11d0-8815-4b5f-cd0b-dfde850d5cd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"Never heard of this airline until I flew in July on Embraer 190 from Tianjin to Ningbo but impressed by service standards. At the airport the check in and boarding was quick and efficient and FA's were very attentive. Okay their English language skills need improving but never seen such an efficient and smiling set of FA's. Seats comfortable for this quite short trip meal was also good - lack of newspapers though. Will fly them again in September and woulkd have no doubts about recommending them to others as a must-try airline.\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print missing values\n",
        "print(\"missing value\")\n",
        "print(data.isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q_Sv1nIzOCGX",
        "outputId": "6794802a-64a0-4e37-d7c9-a31352cac696"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "missing value\n",
            "airline_name                       0\n",
            "link                               0\n",
            "author                             0\n",
            "author_country                   128\n",
            "date                               0\n",
            "content                            0\n",
            "cabin_flown                      220\n",
            "seat_comfort_rating              733\n",
            "overall_rating                   279\n",
            "inflight_entertainment_rating    758\n",
            "food_beverages_rating            741\n",
            "recommended                        2\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# maping data correlation using heatmap\n",
        "plt.figure(figsize=(20,10))\n",
        "sns.heatmap(data.corr(),annot=True,cmap='BuPu')\n",
        "plt.title('Correlation Heatmap',fontsize=14)\n",
        "plt.yticks(rotation =0)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "F1gp0QuVQrO-",
        "outputId": "c0911d0e-2131-42cc-df41-9de51ab39377"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Wordcloud**"
      ],
      "metadata": {
        "id": "2kKDDvfF4Yqz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stop = stopwords.words('english')"
      ],
      "metadata": {
        "id": "7VHMvrp3dvvO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "moddata = data['content'].apply(lambda words: ' '.join(word.lower() for word in words.split() if word not in stop))"
      ],
      "metadata": {
        "id": "CitmhH-UZ6--"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#print 100 most frequent data\n",
        "Freqdata = Counter(\" \".join(moddata).split()).most_common(100)"
      ],
      "metadata": {
        "id": "Yv_ghFzBd241"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Freqdata"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5EF77S2te4Hn",
        "outputId": "3455ef46-c5e4-4def-ee1b-ec7ed3665a21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('i', 8281),\n",
              " ('flight', 7494),\n",
              " ('the', 5002),\n",
              " ('seat', 3579),\n",
              " ('food', 2991),\n",
              " ('service', 2713),\n",
              " ('good', 2615),\n",
              " ('-', 2182),\n",
              " ('staff', 1881),\n",
              " ('crew', 1811),\n",
              " ('cabin', 1701),\n",
              " ('hour', 1675),\n",
              " ('time', 1645),\n",
              " ('airline', 1549),\n",
              " ('would', 1510),\n",
              " ('business', 1492),\n",
              " ('meal', 1485),\n",
              " ('class', 1469),\n",
              " ('flight.', 1359),\n",
              " ('air', 1263),\n",
              " ('entertainment', 1245),\n",
              " ('one', 1204),\n",
              " ('return', 1155),\n",
              " ('flew', 1080),\n",
              " ('we', 1031),\n",
              " ('first', 1012),\n",
              " ('comfortable', 990),\n",
              " ('plane', 986),\n",
              " ('great', 961),\n",
              " ('new', 952),\n",
              " ('economy', 950),\n",
              " ('fly', 919),\n",
              " ('get', 897),\n",
              " ('back', 855),\n",
              " ('served', 842),\n",
              " ('leg', 841),\n",
              " ('excellent', 824),\n",
              " ('even', 816),\n",
              " ('passengers', 813),\n",
              " ('friendly', 790),\n",
              " ('aircraft', 778),\n",
              " ('could', 774),\n",
              " ('china', 763),\n",
              " ('us', 754),\n",
              " ('airport', 743),\n",
              " ('2', 700),\n",
              " ('check', 692),\n",
              " ('much', 685),\n",
              " ('long', 681),\n",
              " ('lounge', 675),\n",
              " ('inflight', 673),\n",
              " ('also', 667),\n",
              " ('old', 666),\n",
              " ('drinks', 653),\n",
              " ('overall', 636),\n",
              " ('singapore', 632),\n",
              " ('experience', 628),\n",
              " ('boarding', 611),\n",
              " ('really', 603),\n",
              " ('better', 602),\n",
              " ('however', 601),\n",
              " ('on', 597),\n",
              " ('ife', 594),\n",
              " ('well', 585),\n",
              " ('delayed', 585),\n",
              " ('they', 580),\n",
              " ('again.', 580),\n",
              " ('quite', 576),\n",
              " ('good.', 556),\n",
              " ('full', 556),\n",
              " ('flying', 554),\n",
              " ('like', 551),\n",
              " ('time.', 551),\n",
              " ('3', 549),\n",
              " ('clean', 546),\n",
              " ('no', 545),\n",
              " ('trip', 543),\n",
              " ('bangkok', 542),\n",
              " ('nice', 541),\n",
              " ('attendants', 526),\n",
              " ('my', 522),\n",
              " ('it', 515),\n",
              " ('airline.', 514),\n",
              " ('check-in', 512),\n",
              " ('airlines', 511),\n",
              " ('got', 504),\n",
              " ('arrived', 503),\n",
              " ('this', 493),\n",
              " ('way', 489),\n",
              " ('last', 487),\n",
              " ('little', 485),\n",
              " ('still', 475),\n",
              " ('offered', 473),\n",
              " ('due', 470),\n",
              " ('english', 469),\n",
              " ('took', 465),\n",
              " ('two', 465),\n",
              " ('made', 455),\n",
              " ('all', 453),\n",
              " ('bit', 451)]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "stopwords = set(STOPWORDS)"
      ],
      "metadata": {
        "id": "40D6hZ4A2FnJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# create wordcloud of 100 most frequent data\n",
        "text = data['content'].values\n",
        "wordcloud = WordCloud(width = 800, height = 800,\n",
        "                background_color ='white',\n",
        "                max_words=100,\n",
        "                stopwords = stopwords,\n",
        "                min_font_size = 10).generate(str(text))\n"
      ],
      "metadata": {
        "id": "JvtJbxCG2ZiQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot the WordCloud image                      \n",
        "plt.figure(figsize = (6, 6), facecolor = None)\n",
        "plt.imshow(wordcloud)\n",
        "plt.axis(\"off\")\n",
        "plt.tight_layout(pad = 0)\n",
        " \n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "xnWKfq1j4HAh",
        "outputId": "8a86f58a-cabb-42f2-ef41-0d0b68c34805"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Topic Modeling**"
      ],
      "metadata": {
        "id": "u1TU0uan4mE1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#parems can be both in Integer or float format.\n",
        "#except for stopwords which are excluded , other words can only be appeared in min of 2 documents and max of 95% of documents.\n",
        "#throws out random words , misspellings and also very common words.\n",
        "cv = CountVectorizer(max_df=0.95,min_df=2,stop_words='english')\n"
      ],
      "metadata": {
        "id": "bvJce85QJ0fx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dtm = cv.fit_transform(data['content'])"
      ],
      "metadata": {
        "id": "s0gfW4SsJMVq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dtm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PhNZX46-LC3i",
        "outputId": "3ffa8c97-76ee-403e-bdb3-25be6b3b5c98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<4970x7281 sparse matrix of type '<class 'numpy.int64'>'\n",
              "\twith 226638 stored elements in Compressed Sparse Row format>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LDA = LatentDirichletAllocation(n_components=6,random_state=42)"
      ],
      "metadata": {
        "id": "C_HTQYWsLINH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "LDA.fit(dtm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7YtIituoMJwZ",
        "outputId": "bfd74b82-9aff-4b94-feac-09a284aa0c08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LatentDirichletAllocation(n_components=6, random_state=42)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(cv.get_feature_names())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nn8APOBLMmoh",
        "outputId": "5caf433c-80a4-4537-b8ce-0ddcd78297b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7281"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_word_id = random.randint(0,7281)"
      ],
      "metadata": {
        "id": "gONqZ0nCMssJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv.get_feature_names()[random_word_id]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "zcyJfk8sM1rQ",
        "outputId": "7dca8c01-c48a-4659-a694-0c20615c964f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'wound'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Number of topics\n",
        "len(LDA.components_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AMi56Hz3M9uS",
        "outputId": "b4732a25-63bc-40b7-df28-4ccef3b66c04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LDA.components_.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ou_QI7s4NA44",
        "outputId": "2284df18-d20d-4524-915f-b1c4bd3536ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6, 7281)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LDA.components_\n",
        "# probabilty of each of the words belonging to each topic."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "koJkaZuNOdVZ",
        "outputId": "ef46c0b0-14aa-4657-bd4f-854db0fb6eb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.16853293,  0.16666701,  0.16691419, ...,  0.16666696,\n",
              "         0.16666686,  0.16666701],\n",
              "       [ 0.16716801,  0.16666718,  2.16612416, ...,  2.16392488,\n",
              "         6.88644843,  2.16685047],\n",
              "       [ 0.166868  ,  0.17275239,  0.16666681, ...,  0.16666692,\n",
              "         9.44530238,  0.16787446],\n",
              "       [ 0.16718159,  3.1583285 ,  0.16696117, ...,  0.16678968,\n",
              "         0.16778169, 14.1640409 ],\n",
              "       [32.70946936,  0.16801871,  0.16666677, ...,  0.1679161 ,\n",
              "         0.16703901,  0.16757491],\n",
              "       [ 2.62078012,  0.1675662 ,  0.1666669 , ...,  0.16803547,\n",
              "         0.16676164,  0.16699225]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "single_topic =  LDA.components_[2]"
      ],
      "metadata": {
        "id": "fvhlFGczNEhS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "single_topic.argsort() # words indexs of least probable words to most probable words"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SXTG62UDNOda",
        "outputId": "d4b3d880-f6de-4fb3-f232-1a944a0dc533"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([6914, 4284,  403, ..., 2808, 2768, 5722])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Argsort returns index positions from Least to greatest. What we want is top 10 values.\n",
        "#thus we return the index positions of 10 of the most probable words\n",
        "single_topic.argsort()[-10:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_S7d1zx8NduD",
        "outputId": "2033bfc4-d53d-44d7-9cfb-ac194a1a999d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3840, 5924, 4120, 4523, 1851, 1247, 5788, 2808, 2768, 5722])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_twenty_words = single_topic.argsort()[-20:]\n",
        "for index in top_twenty_words:\n",
        "    print(cv.get_feature_names()[index])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t2jhYuhdNrOk",
        "outputId": "60e24c9d-5de6-4302-ee36-cd42f978de8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "poor\n",
            "business\n",
            "asked\n",
            "hour\n",
            "entertainment\n",
            "economy\n",
            "airline\n",
            "class\n",
            "plane\n",
            "did\n",
            "leg\n",
            "sin\n",
            "meal\n",
            "old\n",
            "crew\n",
            "cabin\n",
            "service\n",
            "food\n",
            "flight\n",
            "seat\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i, topic in enumerate(LDA.components_):\n",
        "    print(f\"The top 20 words #{i}\")\n",
        "    print([cv.get_feature_names()[index] for index in topic.argsort()[-20:]])\n",
        "    print('\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mg9G1i6TODNp",
        "outputId": "b3d34e18-c577-4873-c6f3-8c2739a848ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The top 20 words #0\n",
            "['lumpur', 'kuala', 'entertainment', 'air', 'served', 'friendly', 'aircraft', 'return', 'plane', 'meal', 'cabin', 'seat', 'service', 'airline', 'crew', 'good', 'food', 'time', 'kul', 'flight']\n",
            "\n",
            "\n",
            "The top 20 words #1\n",
            "['kul', 'tg', 'time', 'return', 'lounge', 'premium', 'business', 'economy', 'crew', 'good', 'class', 'cabin', 'kl', 'service', 'meal', 'flight', 'food', 'thai', 'seat', 'bkk']\n",
            "\n",
            "\n",
            "The top 20 words #2\n",
            "['poor', 'business', 'asked', 'hour', 'entertainment', 'economy', 'airline', 'class', 'plane', 'did', 'leg', 'sin', 'meal', 'old', 'crew', 'cabin', 'service', 'food', 'flight', 'seat']\n",
            "\n",
            "\n",
            "The top 20 words #3\n",
            "['return', 'icn', 'meal', 'airline', 'time', 'economy', 'great', 'staff', 'entertainment', 'cabin', 'crew', 'excellent', 'comfortable', 'business', 'seat', 'class', 'service', 'food', 'good', 'flight']\n",
            "\n",
            "\n",
            "The top 20 words #4\n",
            "['minutes', 'arrived', 'did', 'return', 'told', 'beijing', 'late', 'boarding', 'plane', 'china', 'passengers', 'airline', 'delayed', 'air', 'airport', 'staff', 'check', 'time', 'hour', 'flight']\n",
            "\n",
            "\n",
            "The top 20 words #5\n",
            "['check', 'meal', 'plane', 'thai', 'short', 'return', 'phuket', 'pek', 'airways', 'staff', 'beijing', 'time', 'food', 'bkk', 'air', 'airline', 'good', 'service', 'bangkok', 'flight']\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Topic** **0** -> **Entertainment** \n",
        "\n",
        "**Topic** **1** -> **Seat** **class**\n",
        "\n",
        " **Topic** **2** -> **In**-**flight** **meal**\n",
        "\n",
        " **Topic** **3** -> **Seat** **Comfort**\n",
        "\n",
        "**Topic** **4** -> **China** **Airlines** (**similar** **to** **Singapore** **Airlines** **in** **the** **paper**)\n",
        "\n",
        "**Topic** **5** -> **Staff** **services**\n",
        "\n"
      ],
      "metadata": {
        "id": "MMFAslK2mTuq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "topic_results = LDA.transform(dtm)"
      ],
      "metadata": {
        "id": "eMPm5JcBUOLc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "topic_results.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rdwAw5o2WK4X",
        "outputId": "204601e6-69e2-4a75-8d74-06f9f5738a6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4970, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "topic_results[0]\n",
        "#probability of each of the comments (documents) belonging to each of the topics."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O2pXQP-fVYUC",
        "outputId": "189e2e65-360b-498e-b327-18802ed7d4f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.51701374, 0.01525493, 0.01524001, 0.42193379, 0.01526508,\n",
              "       0.01529244])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "topic_results[0].round(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lBqEqFseXJU2",
        "outputId": "5523f11e-c151-4a3e-97b8-dd029649885e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.52, 0.02, 0.02, 0.42, 0.02, 0.02])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "topic_results[0].argmax()\n",
        "# returns the index position of the highest probability for each of the documents"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_TwsAKriYIXk",
        "outputId": "a9572adb-6520-4e10-9c6b-6bd47d4bf68a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['topic'] = topic_results.argmax(axis = 1)"
      ],
      "metadata": {
        "id": "8d6uQit3YqK_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2jXeuQtriB8-",
        "outputId": "de5bf665-90b6-462e-8578-5fb666a53c08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  airline_name                      link                  author  \\\n",
              "0      airasia  /airline-reviews/airasia         Sotheareach Sok   \n",
              "1      airasia  /airline-reviews/airasia           Thomas Jellis   \n",
              "2      airasia  /airline-reviews/airasia            Zhivko Kulev   \n",
              "3      airasia  /airline-reviews/airasia                S Altham   \n",
              "4      airasia  /airline-reviews/airasia              Peter Tong   \n",
              "5      airasia  /airline-reviews/airasia          Nitin Aggarwal   \n",
              "6      airasia  /airline-reviews/airasia                C Memoli   \n",
              "7      airasia  /airline-reviews/airasia                N Preeti   \n",
              "8      airasia  /airline-reviews/airasia  Ranganathan Manikandan   \n",
              "9      airasia  /airline-reviews/airasia               N Schöbel   \n",
              "\n",
              "   author_country       date  \\\n",
              "0        Cambodia 2015-07-22   \n",
              "1  United Kingdom 2015-07-22   \n",
              "2        Bulgaria 2015-07-21   \n",
              "3       Australia 2015-06-28   \n",
              "4       Indonesia 2015-06-22   \n",
              "5           India 2015-06-04   \n",
              "6   United States 2015-05-05   \n",
              "7           India 2015-05-04   \n",
              "8           India 2015-04-10   \n",
              "9         Germany 2015-04-08   \n",
              "\n",
              "                                             content cabin_flown  \\\n",
              "0  The flight was very pleasant. I enjoyed it but...     Economy   \n",
              "1  I flew to Kuala Lumpur and back and hated both...     Economy   \n",
              "2  June 2015 I went on a small trip around Asia a...     Economy   \n",
              "3  This was our first AirAsia trip from Perth to ...     Economy   \n",
              "4  Flew AirAsia from Jakarta to Bali and overall ...     Economy   \n",
              "5  Air Asia India: Traveled from Delhi to Bangalo...     Economy   \n",
              "6  Flew Bangkok to Bali then Bali to Singapore. P...     Economy   \n",
              "7  Round-trip from Goa to Bangalore on 29 April 2...     Economy   \n",
              "8  TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...     Economy   \n",
              "9  Flew recently from Denpasar to Kuala Lumpur. F...     Economy   \n",
              "\n",
              "   seat_comfort_rating  overall_rating  inflight_entertainment_rating  \\\n",
              "0                  3.0             8.0                            1.0   \n",
              "1                  1.0             3.0                            NaN   \n",
              "2                  5.0            10.0                            5.0   \n",
              "3                  3.0             8.0                            NaN   \n",
              "4                  4.0             8.0                            NaN   \n",
              "5                  1.0             1.0                            1.0   \n",
              "6                  4.0             9.0                            2.0   \n",
              "7                  4.0             8.0                            1.0   \n",
              "8                  4.0             7.0                            1.0   \n",
              "9                  1.0             1.0                            1.0   \n",
              "\n",
              "   food_beverages_rating  recommended  topic  \n",
              "0                    1.0          1.0      0  \n",
              "1                    NaN          0.0      2  \n",
              "2                    4.0          1.0      4  \n",
              "3                    NaN          1.0      4  \n",
              "4                    NaN          1.0      0  \n",
              "5                    1.0          0.0      4  \n",
              "6                    4.0          1.0      0  \n",
              "7                    3.0          1.0      5  \n",
              "8                    1.0          1.0      0  \n",
              "9                    1.0          0.0      0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-591240a2-f4ce-4a82-b01b-95c7d29287ff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_name</th>\n",
              "      <th>link</th>\n",
              "      <th>author</th>\n",
              "      <th>author_country</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>cabin_flown</th>\n",
              "      <th>seat_comfort_rating</th>\n",
              "      <th>overall_rating</th>\n",
              "      <th>inflight_entertainment_rating</th>\n",
              "      <th>food_beverages_rating</th>\n",
              "      <th>recommended</th>\n",
              "      <th>topic</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Sotheareach Sok</td>\n",
              "      <td>Cambodia</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Thomas Jellis</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Zhivko Kulev</td>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>2015-07-21</td>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>S Altham</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-06-28</td>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Peter Tong</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2015-06-22</td>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Nitin Aggarwal</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-06-04</td>\n",
              "      <td>Air Asia India: Traveled from Delhi to Bangalo...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>C Memoli</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>Flew Bangkok to Bali then Bali to Singapore. P...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Preeti</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-05-04</td>\n",
              "      <td>Round-trip from Goa to Bangalore on 29 April 2...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Ranganathan Manikandan</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-04-10</td>\n",
              "      <td>TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Schöbel</td>\n",
              "      <td>Germany</td>\n",
              "      <td>2015-04-08</td>\n",
              "      <td>Flew recently from Denpasar to Kuala Lumpur. F...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-591240a2-f4ce-4a82-b01b-95c7d29287ff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-591240a2-f4ce-4a82-b01b-95c7d29287ff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-591240a2-f4ce-4a82-b01b-95c7d29287ff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.loc[: ,[\"content\" ,\"topic\"]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "IlbK-cadknPH",
        "outputId": "9f78351c-e08f-4562-8dad-15dbaf6fcbb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                content  topic\n",
              "0     The flight was very pleasant. I enjoyed it but...      0\n",
              "1     I flew to Kuala Lumpur and back and hated both...      2\n",
              "2     June 2015 I went on a small trip around Asia a...      4\n",
              "3     This was our first AirAsia trip from Perth to ...      4\n",
              "4     Flew AirAsia from Jakarta to Bali and overall ...      0\n",
              "...                                                 ...    ...\n",
              "4965  HKG-BKK. Flew on A380. The whole trip from che...      3\n",
              "4966  SIN-BKK-TPE: SIN-BKK B773 service with the bra...      3\n",
              "4967  Have not flown Tianjin Airlines for a long tim...      4\n",
              "4968  Never heard of this airline until I flew in Ju...      5\n",
              "4969  Never heard of this airline until I flew in Ju...      5\n",
              "\n",
              "[4970 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0968e16-ba67-432e-b5dc-49e6edcf86a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>content</th>\n",
              "      <th>topic</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4965</th>\n",
              "      <td>HKG-BKK. Flew on A380. The whole trip from che...</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4966</th>\n",
              "      <td>SIN-BKK-TPE: SIN-BKK B773 service with the bra...</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4967</th>\n",
              "      <td>Have not flown Tianjin Airlines for a long tim...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4968</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4969</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4970 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0968e16-ba67-432e-b5dc-49e6edcf86a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c0968e16-ba67-432e-b5dc-49e6edcf86a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c0968e16-ba67-432e-b5dc-49e6edcf86a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Number of documents belonging to each topic\n",
        "df_topic_distribution = data['topic'].value_counts().reset_index(name=\"Num Documents\")\n",
        "df_topic_distribution.columns = ['Topic Num', 'Num Documents']\n",
        "df_topic_distribution"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "IZC8tnF8BQI-",
        "outputId": "29205240-444d-414d-8c0e-7f60ccf60bdb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Topic Num  Num Documents\n",
              "0          3           2167\n",
              "1          0            761\n",
              "2          4            737\n",
              "3          2            580\n",
              "4          5            428\n",
              "5          1            297"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1454757-3c65-47c0-8669-9d306f6cbea3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Topic Num</th>\n",
              "      <th>Num Documents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>2167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>761</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>297</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1454757-3c65-47c0-8669-9d306f6cbea3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b1454757-3c65-47c0-8669-9d306f6cbea3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b1454757-3c65-47c0-8669-9d306f6cbea3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Sentiment Analysis using Vader(Suitable for Social Media Text)**"
      ],
      "metadata": {
        "id": "o9VsDmWVNx7v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sent_analyzer = SentimentIntensityAnalyzer()"
      ],
      "metadata": {
        "id": "WCiuOGukVX0b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def format_output(output_dict):\n",
        "  \n",
        "  polarity = \"neutral\"\n",
        "\n",
        "  if(output_dict['compound']>= 0.05):\n",
        "    polarity = \"positive\"\n",
        "\n",
        "  elif(output_dict['compound']<= -0.05):\n",
        "    polarity = \"negative\"\n",
        "\n",
        "  return polarity\n",
        "\n"
      ],
      "metadata": {
        "id": "5UXBv9FSJpZh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_sentiment(text):\n",
        "  sent_analyzer = SentimentIntensityAnalyzer()\n",
        "  output_dict =  sent_analyzer.polarity_scores(text)\n",
        "  return format_output(output_dict)"
      ],
      "metadata": {
        "id": "nF5zfh06MfEB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['scores'] = data['content'].apply(lambda review:sent_analyzer.polarity_scores(review))"
      ],
      "metadata": {
        "id": "A1qOH4GEUt0T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ocv-pcSDVkUe",
        "outputId": "7f43fffc-0037-4733-e0d1-a028770969b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  airline_name                      link                  author  \\\n",
              "0      airasia  /airline-reviews/airasia         Sotheareach Sok   \n",
              "1      airasia  /airline-reviews/airasia           Thomas Jellis   \n",
              "2      airasia  /airline-reviews/airasia            Zhivko Kulev   \n",
              "3      airasia  /airline-reviews/airasia                S Altham   \n",
              "4      airasia  /airline-reviews/airasia              Peter Tong   \n",
              "5      airasia  /airline-reviews/airasia          Nitin Aggarwal   \n",
              "6      airasia  /airline-reviews/airasia                C Memoli   \n",
              "7      airasia  /airline-reviews/airasia                N Preeti   \n",
              "8      airasia  /airline-reviews/airasia  Ranganathan Manikandan   \n",
              "9      airasia  /airline-reviews/airasia               N Schöbel   \n",
              "\n",
              "   author_country       date  \\\n",
              "0        Cambodia 2015-07-22   \n",
              "1  United Kingdom 2015-07-22   \n",
              "2        Bulgaria 2015-07-21   \n",
              "3       Australia 2015-06-28   \n",
              "4       Indonesia 2015-06-22   \n",
              "5           India 2015-06-04   \n",
              "6   United States 2015-05-05   \n",
              "7           India 2015-05-04   \n",
              "8           India 2015-04-10   \n",
              "9         Germany 2015-04-08   \n",
              "\n",
              "                                             content cabin_flown  \\\n",
              "0  The flight was very pleasant. I enjoyed it but...     Economy   \n",
              "1  I flew to Kuala Lumpur and back and hated both...     Economy   \n",
              "2  June 2015 I went on a small trip around Asia a...     Economy   \n",
              "3  This was our first AirAsia trip from Perth to ...     Economy   \n",
              "4  Flew AirAsia from Jakarta to Bali and overall ...     Economy   \n",
              "5  Air Asia India: Traveled from Delhi to Bangalo...     Economy   \n",
              "6  Flew Bangkok to Bali then Bali to Singapore. P...     Economy   \n",
              "7  Round-trip from Goa to Bangalore on 29 April 2...     Economy   \n",
              "8  TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...     Economy   \n",
              "9  Flew recently from Denpasar to Kuala Lumpur. F...     Economy   \n",
              "\n",
              "   seat_comfort_rating  overall_rating  inflight_entertainment_rating  \\\n",
              "0                  3.0             8.0                            1.0   \n",
              "1                  1.0             3.0                            NaN   \n",
              "2                  5.0            10.0                            5.0   \n",
              "3                  3.0             8.0                            NaN   \n",
              "4                  4.0             8.0                            NaN   \n",
              "5                  1.0             1.0                            1.0   \n",
              "6                  4.0             9.0                            2.0   \n",
              "7                  4.0             8.0                            1.0   \n",
              "8                  4.0             7.0                            1.0   \n",
              "9                  1.0             1.0                            1.0   \n",
              "\n",
              "   food_beverages_rating  recommended  topic  \\\n",
              "0                    1.0          1.0      0   \n",
              "1                    NaN          0.0      2   \n",
              "2                    4.0          1.0      4   \n",
              "3                    NaN          1.0      4   \n",
              "4                    NaN          1.0      0   \n",
              "5                    1.0          0.0      4   \n",
              "6                    4.0          1.0      0   \n",
              "7                    3.0          1.0      5   \n",
              "8                    1.0          1.0      0   \n",
              "9                    1.0          0.0      0   \n",
              "\n",
              "                                              scores  \n",
              "0  {'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...  \n",
              "1  {'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...  \n",
              "2  {'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...  \n",
              "3  {'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...  \n",
              "4  {'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...  \n",
              "5  {'neg': 0.056, 'neu': 0.924, 'pos': 0.019, 'co...  \n",
              "6  {'neg': 0.039, 'neu': 0.822, 'pos': 0.139, 'co...  \n",
              "7  {'neg': 0.092, 'neu': 0.815, 'pos': 0.092, 'co...  \n",
              "8  {'neg': 0.0, 'neu': 0.703, 'pos': 0.297, 'comp...  \n",
              "9  {'neg': 0.06, 'neu': 0.897, 'pos': 0.043, 'com...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37a8136c-5ed3-4b7f-8215-c335c644abfe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_name</th>\n",
              "      <th>link</th>\n",
              "      <th>author</th>\n",
              "      <th>author_country</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>cabin_flown</th>\n",
              "      <th>seat_comfort_rating</th>\n",
              "      <th>overall_rating</th>\n",
              "      <th>inflight_entertainment_rating</th>\n",
              "      <th>food_beverages_rating</th>\n",
              "      <th>recommended</th>\n",
              "      <th>topic</th>\n",
              "      <th>scores</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Sotheareach Sok</td>\n",
              "      <td>Cambodia</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Thomas Jellis</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Zhivko Kulev</td>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>2015-07-21</td>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>S Altham</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-06-28</td>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Peter Tong</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2015-06-22</td>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Nitin Aggarwal</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-06-04</td>\n",
              "      <td>Air Asia India: Traveled from Delhi to Bangalo...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.056, 'neu': 0.924, 'pos': 0.019, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>C Memoli</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>Flew Bangkok to Bali then Bali to Singapore. P...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.039, 'neu': 0.822, 'pos': 0.139, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Preeti</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-05-04</td>\n",
              "      <td>Round-trip from Goa to Bangalore on 29 April 2...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "      <td>{'neg': 0.092, 'neu': 0.815, 'pos': 0.092, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Ranganathan Manikandan</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-04-10</td>\n",
              "      <td>TRZ-KUL-DPS-JOG and CGK-KUL-MAA. Travelled in ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.703, 'pos': 0.297, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>N Schöbel</td>\n",
              "      <td>Germany</td>\n",
              "      <td>2015-04-08</td>\n",
              "      <td>Flew recently from Denpasar to Kuala Lumpur. F...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.06, 'neu': 0.897, 'pos': 0.043, 'com...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37a8136c-5ed3-4b7f-8215-c335c644abfe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-37a8136c-5ed3-4b7f-8215-c335c644abfe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-37a8136c-5ed3-4b7f-8215-c335c644abfe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"vader_prediction\"] = data[\"content\"].apply(predict_sentiment)"
      ],
      "metadata": {
        "id": "kyVbIv-dNBY5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.sample(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aQ9AusKaNdFy",
        "outputId": "fad40b7c-6683-434a-b059-ad49e39c2966"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 airline_name                                      link  \\\n",
              "4794             thai-airways             /airline-reviews/thai-airways   \n",
              "3994      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "4452       singapore-airlines       /airline-reviews/singapore-airlines   \n",
              "3738      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "925                 air-india                /airline-reviews/air-india   \n",
              "448                 airasia-x                /airline-reviews/airasia-x   \n",
              "2695       hong-kong-airlines       /airline-reviews/hong-kong-airlines   \n",
              "2014   china-eastern-airlines   /airline-reviews/china-eastern-airlines   \n",
              "2922               korean-air               /airline-reviews/korean-air   \n",
              "3944      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "241                   airasia                  /airline-reviews/airasia   \n",
              "2060   china-eastern-airlines   /airline-reviews/china-eastern-airlines   \n",
              "2333  china-southern-airlines  /airline-reviews/china-southern-airlines   \n",
              "2734           japan-airlines           /airline-reviews/japan-airlines   \n",
              "3462        malaysia-airlines        /airline-reviews/malaysia-airlines   \n",
              "2895               korean-air               /airline-reviews/korean-air   \n",
              "3428        malaysia-airlines        /airline-reviews/malaysia-airlines   \n",
              "1898           china-airlines           /airline-reviews/china-airlines   \n",
              "27                    airasia                  /airline-reviews/airasia   \n",
              "3794      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "\n",
              "              author  author_country       date  \\\n",
              "4794    B Terpenning   United States 2014-01-24   \n",
              "3994    James Carter   United States 2010-01-23   \n",
              "4452        H Watson       Australia 2014-01-22   \n",
              "3738          A Marc       Australia 2015-04-22   \n",
              "925    Ashutosh Garg           India 2014-08-15   \n",
              "448           J Teoh       Australia 2012-08-08   \n",
              "2695       Ann Chung       Hong Kong 2013-08-06   \n",
              "2014   Matthew Zhang   United States 2014-08-06   \n",
              "2922          P Dean       Australia 2015-01-19   \n",
              "3944    N Sutherland  United Kingdom 2011-12-19   \n",
              "241        Mel Kelly       Australia 2012-06-06   \n",
              "2060     L McGinniss       Australia 2013-12-29   \n",
              "2333         Yang Xi     New Zealand 2015-02-24   \n",
              "2734         L Alvin           Japan 2015-05-12   \n",
              "3462         M Boehm       Australia 2014-06-20   \n",
              "2895  Gokul Srinivas        Malaysia 2015-07-27   \n",
              "3428   Tapani Utunen         Finland 2014-08-08   \n",
              "1898          Y Chou          Taiwan 2011-10-05   \n",
              "27       Aadi Achint           India 2014-12-22   \n",
              "3794      N Clemente   United States 2014-08-14   \n",
              "\n",
              "                                                content      cabin_flown  \\\n",
              "4794  Flew Thai flight 910 from Bangkok to Heathrow ...  Premium Economy   \n",
              "3994  SFO-MNL. Business class was showing its age an...   Business Class   \n",
              "4452  Flew Paris CDG-SIN-SYD. First leg was on the A...          Economy   \n",
              "3738  Flew Manila-Melbourne-Manila A330-300 economy ...          Economy   \n",
              "925   Delhi-Kolkata-Delhi. Delhi-Kolkata (CCU) on Ai...          Economy   \n",
              "448   SYD-KUL on A330-300. Successful upgrade to Pre...  Premium Economy   \n",
              "2695  First and last time flying them. First time vi...          Economy   \n",
              "2014  I flew China Eastern Airlines from Chongqing-J...          Economy   \n",
              "2922  KE928 Rome to Incheon 11 Jan 2015. Online chec...          Economy   \n",
              "3944  MNL-CGK-MNL. Terminal 2 check-in was fine thou...          Economy   \n",
              "241   Just flew 9 flight in total with Air Asia X an...          Economy   \n",
              "2060  MEL to LHR via Shanghai. No problem at all. On...          Economy   \n",
              "2333  Three times taking China Southern Airline betw...          Economy   \n",
              "2734  Flew BKK-HND 6 hour or so flight time. After t...          Economy   \n",
              "3462  MH 3123 MIRI - BKI via Labuan. Boarding was ea...          Economy   \n",
              "2895  The aircraft operated from KUL to ICN was a B7...          Economy   \n",
              "3428  Several regional sectors SIN-KUL-DPS-KUL-SIN K...          Economy   \n",
              "1898  Taipei to Tokyo round trip twice this summer. ...          Economy   \n",
              "27    Flew with them this week between Bangalore Cha...              NaN   \n",
              "3794  Flew from MNL-MPH-MNL-TUG. Uneventful flight e...          Economy   \n",
              "\n",
              "      seat_comfort_rating  overall_rating  inflight_entertainment_rating  \\\n",
              "4794                  4.0             5.0                            3.0   \n",
              "3994                  NaN             3.0                            NaN   \n",
              "4452                  4.0             8.0                            3.0   \n",
              "3738                  2.0             3.0                            1.0   \n",
              "925                   4.0             7.0                            5.0   \n",
              "448                   NaN             5.0                            NaN   \n",
              "2695                  3.0             1.0                            2.0   \n",
              "2014                  1.0             NaN                            1.0   \n",
              "2922                  4.0            10.0                            0.0   \n",
              "3944                  NaN             6.0                            NaN   \n",
              "241                   4.0             8.0                            0.0   \n",
              "2060                  5.0             8.0                            4.0   \n",
              "2333                  3.0            10.0                            4.0   \n",
              "2734                  3.0             9.0                            4.0   \n",
              "3462                  5.0             8.0                            5.0   \n",
              "2895                  3.0             8.0                            3.0   \n",
              "3428                  4.0             9.0                            4.0   \n",
              "1898                  NaN             8.0                            NaN   \n",
              "27                    2.0             2.0                            1.0   \n",
              "3794                  4.0             9.0                            0.0   \n",
              "\n",
              "      food_beverages_rating  recommended  topic  \\\n",
              "4794                    2.0          1.0      4   \n",
              "3994                    NaN          0.0      2   \n",
              "4452                    4.0          1.0      3   \n",
              "3738                    3.0          0.0      2   \n",
              "925                     2.0          1.0      0   \n",
              "448                     NaN          0.0      3   \n",
              "2695                    2.0          0.0      4   \n",
              "2014                    1.0          0.0      2   \n",
              "2922                    4.0          1.0      2   \n",
              "3944                    NaN          0.0      0   \n",
              "241                     3.0          1.0      0   \n",
              "2060                    5.0          1.0      2   \n",
              "2333                    4.0          1.0      3   \n",
              "2734                    3.0          1.0      3   \n",
              "3462                    5.0          1.0      4   \n",
              "2895                    5.0          1.0      3   \n",
              "3428                    5.0          1.0      3   \n",
              "1898                    NaN          0.0      3   \n",
              "27                      3.0          0.0      0   \n",
              "3794                    3.0          1.0      2   \n",
              "\n",
              "                                                 scores vader_prediction  \n",
              "4794  {'neg': 0.097, 'neu': 0.836, 'pos': 0.067, 'co...         negative  \n",
              "3994  {'neg': 0.228, 'neu': 0.697, 'pos': 0.076, 'co...         negative  \n",
              "4452  {'neg': 0.093, 'neu': 0.727, 'pos': 0.18, 'com...         positive  \n",
              "3738  {'neg': 0.084, 'neu': 0.76, 'pos': 0.156, 'com...         positive  \n",
              "925   {'neg': 0.046, 'neu': 0.806, 'pos': 0.148, 'co...         positive  \n",
              "448   {'neg': 0.152, 'neu': 0.745, 'pos': 0.104, 'co...         negative  \n",
              "2695  {'neg': 0.054, 'neu': 0.93, 'pos': 0.015, 'com...         negative  \n",
              "2014  {'neg': 0.171, 'neu': 0.772, 'pos': 0.058, 'co...         negative  \n",
              "2922  {'neg': 0.0, 'neu': 0.839, 'pos': 0.161, 'comp...         positive  \n",
              "3944  {'neg': 0.058, 'neu': 0.798, 'pos': 0.144, 'co...         positive  \n",
              "241   {'neg': 0.055, 'neu': 0.825, 'pos': 0.121, 'co...         positive  \n",
              "2060  {'neg': 0.054, 'neu': 0.817, 'pos': 0.129, 'co...         positive  \n",
              "2333  {'neg': 0.03, 'neu': 0.793, 'pos': 0.177, 'com...         positive  \n",
              "2734  {'neg': 0.009, 'neu': 0.793, 'pos': 0.198, 'co...         positive  \n",
              "3462  {'neg': 0.033, 'neu': 0.77, 'pos': 0.198, 'com...         positive  \n",
              "2895  {'neg': 0.01, 'neu': 0.809, 'pos': 0.181, 'com...         positive  \n",
              "3428  {'neg': 0.0, 'neu': 0.693, 'pos': 0.307, 'comp...         positive  \n",
              "1898  {'neg': 0.0, 'neu': 0.854, 'pos': 0.146, 'comp...         positive  \n",
              "27    {'neg': 0.116, 'neu': 0.736, 'pos': 0.147, 'co...         positive  \n",
              "3794  {'neg': 0.055, 'neu': 0.799, 'pos': 0.146, 'co...         positive  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d4d9b9c-e638-4a48-8614-be38b709a85e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_name</th>\n",
              "      <th>link</th>\n",
              "      <th>author</th>\n",
              "      <th>author_country</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>cabin_flown</th>\n",
              "      <th>seat_comfort_rating</th>\n",
              "      <th>overall_rating</th>\n",
              "      <th>inflight_entertainment_rating</th>\n",
              "      <th>food_beverages_rating</th>\n",
              "      <th>recommended</th>\n",
              "      <th>topic</th>\n",
              "      <th>scores</th>\n",
              "      <th>vader_prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4794</th>\n",
              "      <td>thai-airways</td>\n",
              "      <td>/airline-reviews/thai-airways</td>\n",
              "      <td>B Terpenning</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014-01-24</td>\n",
              "      <td>Flew Thai flight 910 from Bangkok to Heathrow ...</td>\n",
              "      <td>Premium Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.097, 'neu': 0.836, 'pos': 0.067, 'co...</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3994</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>James Carter</td>\n",
              "      <td>United States</td>\n",
              "      <td>2010-01-23</td>\n",
              "      <td>SFO-MNL. Business class was showing its age an...</td>\n",
              "      <td>Business Class</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.228, 'neu': 0.697, 'pos': 0.076, 'co...</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4452</th>\n",
              "      <td>singapore-airlines</td>\n",
              "      <td>/airline-reviews/singapore-airlines</td>\n",
              "      <td>H Watson</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2014-01-22</td>\n",
              "      <td>Flew Paris CDG-SIN-SYD. First leg was on the A...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.093, 'neu': 0.727, 'pos': 0.18, 'com...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3738</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>A Marc</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-04-22</td>\n",
              "      <td>Flew Manila-Melbourne-Manila A330-300 economy ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.084, 'neu': 0.76, 'pos': 0.156, 'com...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>925</th>\n",
              "      <td>air-india</td>\n",
              "      <td>/airline-reviews/air-india</td>\n",
              "      <td>Ashutosh Garg</td>\n",
              "      <td>India</td>\n",
              "      <td>2014-08-15</td>\n",
              "      <td>Delhi-Kolkata-Delhi. Delhi-Kolkata (CCU) on Ai...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.046, 'neu': 0.806, 'pos': 0.148, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>448</th>\n",
              "      <td>airasia-x</td>\n",
              "      <td>/airline-reviews/airasia-x</td>\n",
              "      <td>J Teoh</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2012-08-08</td>\n",
              "      <td>SYD-KUL on A330-300. Successful upgrade to Pre...</td>\n",
              "      <td>Premium Economy</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.152, 'neu': 0.745, 'pos': 0.104, 'co...</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2695</th>\n",
              "      <td>hong-kong-airlines</td>\n",
              "      <td>/airline-reviews/hong-kong-airlines</td>\n",
              "      <td>Ann Chung</td>\n",
              "      <td>Hong Kong</td>\n",
              "      <td>2013-08-06</td>\n",
              "      <td>First and last time flying them. First time vi...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.054, 'neu': 0.93, 'pos': 0.015, 'com...</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>china-eastern-airlines</td>\n",
              "      <td>/airline-reviews/china-eastern-airlines</td>\n",
              "      <td>Matthew Zhang</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014-08-06</td>\n",
              "      <td>I flew China Eastern Airlines from Chongqing-J...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.171, 'neu': 0.772, 'pos': 0.058, 'co...</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2922</th>\n",
              "      <td>korean-air</td>\n",
              "      <td>/airline-reviews/korean-air</td>\n",
              "      <td>P Dean</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-01-19</td>\n",
              "      <td>KE928 Rome to Incheon 11 Jan 2015. Online chec...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.839, 'pos': 0.161, 'comp...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3944</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>N Sutherland</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2011-12-19</td>\n",
              "      <td>MNL-CGK-MNL. Terminal 2 check-in was fine thou...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.058, 'neu': 0.798, 'pos': 0.144, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Mel Kelly</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2012-06-06</td>\n",
              "      <td>Just flew 9 flight in total with Air Asia X an...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.055, 'neu': 0.825, 'pos': 0.121, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2060</th>\n",
              "      <td>china-eastern-airlines</td>\n",
              "      <td>/airline-reviews/china-eastern-airlines</td>\n",
              "      <td>L McGinniss</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2013-12-29</td>\n",
              "      <td>MEL to LHR via Shanghai. No problem at all. On...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.054, 'neu': 0.817, 'pos': 0.129, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2333</th>\n",
              "      <td>china-southern-airlines</td>\n",
              "      <td>/airline-reviews/china-southern-airlines</td>\n",
              "      <td>Yang Xi</td>\n",
              "      <td>New Zealand</td>\n",
              "      <td>2015-02-24</td>\n",
              "      <td>Three times taking China Southern Airline betw...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.03, 'neu': 0.793, 'pos': 0.177, 'com...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2734</th>\n",
              "      <td>japan-airlines</td>\n",
              "      <td>/airline-reviews/japan-airlines</td>\n",
              "      <td>L Alvin</td>\n",
              "      <td>Japan</td>\n",
              "      <td>2015-05-12</td>\n",
              "      <td>Flew BKK-HND 6 hour or so flight time. After t...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.009, 'neu': 0.793, 'pos': 0.198, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3462</th>\n",
              "      <td>malaysia-airlines</td>\n",
              "      <td>/airline-reviews/malaysia-airlines</td>\n",
              "      <td>M Boehm</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2014-06-20</td>\n",
              "      <td>MH 3123 MIRI - BKI via Labuan. Boarding was ea...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.033, 'neu': 0.77, 'pos': 0.198, 'com...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2895</th>\n",
              "      <td>korean-air</td>\n",
              "      <td>/airline-reviews/korean-air</td>\n",
              "      <td>Gokul Srinivas</td>\n",
              "      <td>Malaysia</td>\n",
              "      <td>2015-07-27</td>\n",
              "      <td>The aircraft operated from KUL to ICN was a B7...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.01, 'neu': 0.809, 'pos': 0.181, 'com...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3428</th>\n",
              "      <td>malaysia-airlines</td>\n",
              "      <td>/airline-reviews/malaysia-airlines</td>\n",
              "      <td>Tapani Utunen</td>\n",
              "      <td>Finland</td>\n",
              "      <td>2014-08-08</td>\n",
              "      <td>Several regional sectors SIN-KUL-DPS-KUL-SIN K...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.693, 'pos': 0.307, 'comp...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1898</th>\n",
              "      <td>china-airlines</td>\n",
              "      <td>/airline-reviews/china-airlines</td>\n",
              "      <td>Y Chou</td>\n",
              "      <td>Taiwan</td>\n",
              "      <td>2011-10-05</td>\n",
              "      <td>Taipei to Tokyo round trip twice this summer. ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.854, 'pos': 0.146, 'comp...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Aadi Achint</td>\n",
              "      <td>India</td>\n",
              "      <td>2014-12-22</td>\n",
              "      <td>Flew with them this week between Bangalore Cha...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.116, 'neu': 0.736, 'pos': 0.147, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3794</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>N Clemente</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014-08-14</td>\n",
              "      <td>Flew from MNL-MPH-MNL-TUG. Uneventful flight e...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.055, 'neu': 0.799, 'pos': 0.146, 'co...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d4d9b9c-e638-4a48-8614-be38b709a85e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3d4d9b9c-e638-4a48-8614-be38b709a85e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3d4d9b9c-e638-4a48-8614-be38b709a85e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.loc[: ,[\"content\" ,\"topic\" ,\"vader_prediction\" , \"scores\"]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "1zbJmEoJOK-A",
        "outputId": "cec249e7-9b14-4d06-85f8-13476f4208e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                content  topic  \\\n",
              "0     The flight was very pleasant. I enjoyed it but...      0   \n",
              "1     I flew to Kuala Lumpur and back and hated both...      2   \n",
              "2     June 2015 I went on a small trip around Asia a...      4   \n",
              "3     This was our first AirAsia trip from Perth to ...      4   \n",
              "4     Flew AirAsia from Jakarta to Bali and overall ...      0   \n",
              "...                                                 ...    ...   \n",
              "4965  HKG-BKK. Flew on A380. The whole trip from che...      3   \n",
              "4966  SIN-BKK-TPE: SIN-BKK B773 service with the bra...      3   \n",
              "4967  Have not flown Tianjin Airlines for a long tim...      4   \n",
              "4968  Never heard of this airline until I flew in Ju...      5   \n",
              "4969  Never heard of this airline until I flew in Ju...      5   \n",
              "\n",
              "     vader_prediction                                             scores  \n",
              "0            positive  {'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...  \n",
              "1            positive  {'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...  \n",
              "2            negative  {'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...  \n",
              "3            positive  {'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...  \n",
              "4            positive  {'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...  \n",
              "...               ...                                                ...  \n",
              "4965         positive  {'neg': 0.0, 'neu': 0.775, 'pos': 0.225, 'comp...  \n",
              "4966         positive  {'neg': 0.06, 'neu': 0.807, 'pos': 0.133, 'com...  \n",
              "4967         negative  {'neg': 0.151, 'neu': 0.814, 'pos': 0.035, 'co...  \n",
              "4968         positive  {'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...  \n",
              "4969         positive  {'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...  \n",
              "\n",
              "[4970 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-60e648a5-66f6-4ad2-91b2-a3d6bc04c294\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>content</th>\n",
              "      <th>topic</th>\n",
              "      <th>vader_prediction</th>\n",
              "      <th>scores</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>0</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>2</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>4</td>\n",
              "      <td>negative</td>\n",
              "      <td>{'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>4</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>0</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4965</th>\n",
              "      <td>HKG-BKK. Flew on A380. The whole trip from che...</td>\n",
              "      <td>3</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.775, 'pos': 0.225, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4966</th>\n",
              "      <td>SIN-BKK-TPE: SIN-BKK B773 service with the bra...</td>\n",
              "      <td>3</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.06, 'neu': 0.807, 'pos': 0.133, 'com...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4967</th>\n",
              "      <td>Have not flown Tianjin Airlines for a long tim...</td>\n",
              "      <td>4</td>\n",
              "      <td>negative</td>\n",
              "      <td>{'neg': 0.151, 'neu': 0.814, 'pos': 0.035, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4968</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>5</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4969</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>5</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4970 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60e648a5-66f6-4ad2-91b2-a3d6bc04c294')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-60e648a5-66f6-4ad2-91b2-a3d6bc04c294 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-60e648a5-66f6-4ad2-91b2-a3d6bc04c294');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.loc[: ,[\"content\",\"vader_prediction\" , \"scores\"]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2879
        },
        "id": "MwMfH_NUyUPR",
        "outputId": "fdb2481b-621f-4763-a1de-a69c1a34fba2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                content vader_prediction  \\\n",
              "0     The flight was very pleasant. I enjoyed it but...         positive   \n",
              "1     I flew to Kuala Lumpur and back and hated both...         positive   \n",
              "2     June 2015 I went on a small trip around Asia a...         negative   \n",
              "3     This was our first AirAsia trip from Perth to ...         positive   \n",
              "4     Flew AirAsia from Jakarta to Bali and overall ...         positive   \n",
              "...                                                 ...              ...   \n",
              "4965  HKG-BKK. Flew on A380. The whole trip from che...         positive   \n",
              "4966  SIN-BKK-TPE: SIN-BKK B773 service with the bra...         positive   \n",
              "4967  Have not flown Tianjin Airlines for a long tim...         negative   \n",
              "4968  Never heard of this airline until I flew in Ju...         positive   \n",
              "4969  Never heard of this airline until I flew in Ju...         positive   \n",
              "\n",
              "                                                 scores  \n",
              "0     {'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...  \n",
              "1     {'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...  \n",
              "2     {'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...  \n",
              "3     {'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...  \n",
              "4     {'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...  \n",
              "...                                                 ...  \n",
              "4965  {'neg': 0.0, 'neu': 0.775, 'pos': 0.225, 'comp...  \n",
              "4966  {'neg': 0.06, 'neu': 0.807, 'pos': 0.133, 'com...  \n",
              "4967  {'neg': 0.151, 'neu': 0.814, 'pos': 0.035, 'co...  \n",
              "4968  {'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...  \n",
              "4969  {'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...  \n",
              "\n",
              "[4970 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-680e5c57-6db2-454c-b61b-f03e1d12f149\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>content</th>\n",
              "      <th>vader_prediction</th>\n",
              "      <th>scores</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The flight was very pleasant. I enjoyed it but...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.673, 'pos': 0.327, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I flew to Kuala Lumpur and back and hated both...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.061, 'neu': 0.823, 'pos': 0.116, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>June 2015 I went on a small trip around Asia a...</td>\n",
              "      <td>negative</td>\n",
              "      <td>{'neg': 0.102, 'neu': 0.837, 'pos': 0.061, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>This was our first AirAsia trip from Perth to ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.022, 'neu': 0.883, 'pos': 0.095, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Flew AirAsia from Jakarta to Bali and overall ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.038, 'neu': 0.737, 'pos': 0.225, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4965</th>\n",
              "      <td>HKG-BKK. Flew on A380. The whole trip from che...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.775, 'pos': 0.225, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4966</th>\n",
              "      <td>SIN-BKK-TPE: SIN-BKK B773 service with the bra...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.06, 'neu': 0.807, 'pos': 0.133, 'com...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4967</th>\n",
              "      <td>Have not flown Tianjin Airlines for a long tim...</td>\n",
              "      <td>negative</td>\n",
              "      <td>{'neg': 0.151, 'neu': 0.814, 'pos': 0.035, 'co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4968</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4969</th>\n",
              "      <td>Never heard of this airline until I flew in Ju...</td>\n",
              "      <td>positive</td>\n",
              "      <td>{'neg': 0.025, 'neu': 0.7, 'pos': 0.275, 'comp...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4970 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-680e5c57-6db2-454c-b61b-f03e1d12f149')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-680e5c57-6db2-454c-b61b-f03e1d12f149 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-680e5c57-6db2-454c-b61b-f03e1d12f149');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sentiment_distribution = data['vader_prediction'].value_counts().reset_index(name=\"Num Documents\")\n",
        "df_sentiment_distribution.columns = ['Topic Num', 'Num Documents']\n",
        "df_sentiment_distribution"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "lRV0iiArRSbb",
        "outputId": "6acf826b-77aa-439f-9d71-0160a9b2b91f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Topic Num  Num Documents\n",
              "0  positive           3680\n",
              "1  negative           1239\n",
              "2   neutral             51"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7dc1f6b-ccff-4fe3-a3d1-411945610cc2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Topic Num</th>\n",
              "      <th>Num Documents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>positive</td>\n",
              "      <td>3680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>negative</td>\n",
              "      <td>1239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>neutral</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7dc1f6b-ccff-4fe3-a3d1-411945610cc2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7dc1f6b-ccff-4fe3-a3d1-411945610cc2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7dc1f6b-ccff-4fe3-a3d1-411945610cc2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Keras Model**"
      ],
      "metadata": {
        "id": "YdiQdQJGYDgc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(data.index[(data[\"vader_prediction\"] == \"neutral\")],axis=0,inplace=True)"
      ],
      "metadata": {
        "id": "bH50Mgn4ZK7l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.replace('positive',0)\n",
        "data = data.replace('negative',1)"
      ],
      "metadata": {
        "id": "XNeq0u9EZU-l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.sample(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GJ0bWLdKZcZs",
        "outputId": "177a73fb-1c89-4a60-a8d7-0b0e1ca15b74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 airline_name                                      link  \\\n",
              "2444  china-southern-airlines  /airline-reviews/china-southern-airlines   \n",
              "4839             thai-airways             /airline-reviews/thai-airways   \n",
              "1095                air-india                /airline-reviews/air-india   \n",
              "3792      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "3615        malaysia-airlines        /airline-reviews/malaysia-airlines   \n",
              "4559       singapore-airlines       /airline-reviews/singapore-airlines   \n",
              "163                   airasia                  /airline-reviews/airasia   \n",
              "692                 air-china                /airline-reviews/air-china   \n",
              "2970               korean-air               /airline-reviews/korean-air   \n",
              "4608             thai-airways             /airline-reviews/thai-airways   \n",
              "4318       singapore-airlines       /airline-reviews/singapore-airlines   \n",
              "3737      philippine-airlines      /airline-reviews/philippine-airlines   \n",
              "4660             thai-airways             /airline-reviews/thai-airways   \n",
              "2415  china-southern-airlines  /airline-reviews/china-southern-airlines   \n",
              "4186       singapore-airlines       /airline-reviews/singapore-airlines   \n",
              "307                   airasia                  /airline-reviews/airasia   \n",
              "521                 airasia-x                /airline-reviews/airasia-x   \n",
              "2260  china-southern-airlines  /airline-reviews/china-southern-airlines   \n",
              "4679             thai-airways             /airline-reviews/thai-airways   \n",
              "1759           china-airlines           /airline-reviews/china-airlines   \n",
              "\n",
              "                 author  author_country       date  \\\n",
              "2444             W Kong       Australia 2014-04-27   \n",
              "4839         Brett Wood       Australia 2013-10-01   \n",
              "1095       R McLafferty   United States 2012-12-25   \n",
              "3792         P Saowarat        Thailand 2014-08-20   \n",
              "3615             Yem Ju           Japan 2013-11-25   \n",
              "4559    Stephen Santoso       Indonesia 2013-09-03   \n",
              "163           Alan Ward  United Kingdom 2013-05-19   \n",
              "692        Gael Dufoyet          France 2013-08-04   \n",
              "2970    Charles Kennedy  United Kingdom 2014-05-08   \n",
              "4608  Vignesh Mahadevan           India 2015-07-30   \n",
              "4318            N Kumar       Australia 2014-09-14   \n",
              "3737      Aikawa Ichiro           Japan 2015-04-23   \n",
              "4660          M Osiecki          Poland 2015-02-18   \n",
              "2415        C Blomfield     New Zealand 2014-07-06   \n",
              "4186       Michael Wake       Australia 2015-06-27   \n",
              "307       Magnar Nordal        Thailand 2010-08-21   \n",
              "521         A Niphadkar           India 2011-02-17   \n",
              "2260   Giulio Granzella  United Kingdom 2015-07-14   \n",
              "4679         D Graubard   United States 2014-12-10   \n",
              "1759           C Flores         Austria 2014-06-30   \n",
              "\n",
              "                                                content     cabin_flown  \\\n",
              "2444  CZ325 25 April 2014. I flew from Sydney to Gua...         Economy   \n",
              "4839  BKK to SYD. Again no AVOD system. After contac...         Economy   \n",
              "1095  Business class from Singapore to Delhi on an A...  Business Class   \n",
              "3792  June 14 2014 flight 731. Everything was fine o...         Economy   \n",
              "3615  Flew NRT-KUL on the Boeing 777-200. It was a m...         Economy   \n",
              "4559  AMS-SIN-CGK. Flight was on time. Arrived at Si...         Economy   \n",
              "163   I flew from Singapore to Jakarta on May 14th a...         Economy   \n",
              "692   CDG-Beijing / Shanghai-CDG. First class on the...     First Class   \n",
              "2970  BKK-ICN-LHR. It seems Korean Air are mostly us...  Business Class   \n",
              "4608  I have traveled Thai Airways almost 12 times i...         Economy   \n",
              "4318  SQ 224 and SQ 401 4-5th Sep. Best service. Fle...         Economy   \n",
              "3737  I'm a Japanese tourist flown on Tokyo-Manila-K...         Economy   \n",
              "4660  BKK-HKT and return. Despite such short flight ...         Economy   \n",
              "2415  Auckland-Guangzhou-Heathrow-Dublin and returne...  Business Class   \n",
              "4186  The experience today at Shanghai Airport was a...         Economy   \n",
              "307   Bangkok - Yangon - Bangkok. I bought the ticke...         Economy   \n",
              "521   Mumbai to Kuala Lumpur return. Economy seat co...         Economy   \n",
              "2260  PVG-Xian was almost an hour late due to traffi...         Economy   \n",
              "4679  TG418 from KUL to BKK and TG 642 from BKK to N...  Business Class   \n",
              "1759  On board service is absolutely minimal. Unfrie...         Economy   \n",
              "\n",
              "      seat_comfort_rating  overall_rating  inflight_entertainment_rating  \\\n",
              "2444                  5.0             9.0                            3.0   \n",
              "4839                  1.0             2.0                            1.0   \n",
              "1095                  3.0             2.0                            1.0   \n",
              "3792                  3.0             4.0                            1.0   \n",
              "3615                  5.0             9.0                            5.0   \n",
              "4559                  5.0             9.0                            3.0   \n",
              "163                   4.0             8.0                            0.0   \n",
              "692                   4.0             7.0                            3.0   \n",
              "2970                  5.0            10.0                            3.0   \n",
              "4608                  4.0             9.0                            4.0   \n",
              "4318                  5.0            10.0                            5.0   \n",
              "3737                  3.0             1.0                            1.0   \n",
              "4660                  4.0             8.0                            2.0   \n",
              "2415                  5.0             9.0                            5.0   \n",
              "4186                  3.0             1.0                            3.0   \n",
              "307                   NaN             8.0                            NaN   \n",
              "521                   NaN             9.0                            NaN   \n",
              "2260                  3.0             6.0                            NaN   \n",
              "4679                  5.0             9.0                            4.0   \n",
              "1759                  4.0             2.0                            1.0   \n",
              "\n",
              "      food_beverages_rating  recommended  topic  \\\n",
              "2444                    4.0          1.0      3   \n",
              "4839                    3.0          0.0      1   \n",
              "1095                    3.0          0.0      3   \n",
              "3792                    1.0          0.0      0   \n",
              "3615                    4.0          1.0      3   \n",
              "4559                    5.0          1.0      3   \n",
              "163                     4.0          1.0      3   \n",
              "692                     3.0          1.0      3   \n",
              "2970                    5.0          1.0      3   \n",
              "4608                    5.0          1.0      0   \n",
              "4318                    5.0          1.0      3   \n",
              "3737                    2.0          0.0      0   \n",
              "4660                    3.0          1.0      5   \n",
              "2415                    4.0          1.0      3   \n",
              "4186                    1.0          0.0      4   \n",
              "307                     NaN          1.0      2   \n",
              "521                     NaN          1.0      0   \n",
              "2260                    2.0          1.0      0   \n",
              "4679                    4.0          1.0      1   \n",
              "1759                    2.0          0.0      3   \n",
              "\n",
              "                                                 scores  vader_prediction  \n",
              "2444  {'neg': 0.038, 'neu': 0.874, 'pos': 0.087, 'co...                 0  \n",
              "4839  {'neg': 0.082, 'neu': 0.845, 'pos': 0.073, 'co...                 0  \n",
              "1095  {'neg': 0.036, 'neu': 0.91, 'pos': 0.053, 'com...                 0  \n",
              "3792  {'neg': 0.134, 'neu': 0.727, 'pos': 0.139, 'co...                 1  \n",
              "3615  {'neg': 0.0, 'neu': 0.752, 'pos': 0.248, 'comp...                 0  \n",
              "4559  {'neg': 0.039, 'neu': 0.746, 'pos': 0.215, 'co...                 0  \n",
              "163   {'neg': 0.013, 'neu': 0.785, 'pos': 0.201, 'co...                 0  \n",
              "692   {'neg': 0.056, 'neu': 0.763, 'pos': 0.181, 'co...                 0  \n",
              "2970  {'neg': 0.041, 'neu': 0.816, 'pos': 0.142, 'co...                 0  \n",
              "4608  {'neg': 0.0, 'neu': 0.792, 'pos': 0.208, 'comp...                 0  \n",
              "4318  {'neg': 0.0, 'neu': 0.595, 'pos': 0.405, 'comp...                 0  \n",
              "3737  {'neg': 0.135, 'neu': 0.785, 'pos': 0.08, 'com...                 1  \n",
              "4660  {'neg': 0.043, 'neu': 0.83, 'pos': 0.127, 'com...                 0  \n",
              "2415  {'neg': 0.016, 'neu': 0.894, 'pos': 0.09, 'com...                 0  \n",
              "4186  {'neg': 0.062, 'neu': 0.914, 'pos': 0.024, 'co...                 1  \n",
              "307   {'neg': 0.038, 'neu': 0.89, 'pos': 0.072, 'com...                 0  \n",
              "521   {'neg': 0.058, 'neu': 0.842, 'pos': 0.1, 'comp...                 0  \n",
              "2260  {'neg': 0.068, 'neu': 0.82, 'pos': 0.112, 'com...                 0  \n",
              "4679  {'neg': 0.032, 'neu': 0.752, 'pos': 0.216, 'co...                 0  \n",
              "1759  {'neg': 0.136, 'neu': 0.667, 'pos': 0.196, 'co...                 0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d18f5cd-937c-43ee-8921-db869eefa392\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_name</th>\n",
              "      <th>link</th>\n",
              "      <th>author</th>\n",
              "      <th>author_country</th>\n",
              "      <th>date</th>\n",
              "      <th>content</th>\n",
              "      <th>cabin_flown</th>\n",
              "      <th>seat_comfort_rating</th>\n",
              "      <th>overall_rating</th>\n",
              "      <th>inflight_entertainment_rating</th>\n",
              "      <th>food_beverages_rating</th>\n",
              "      <th>recommended</th>\n",
              "      <th>topic</th>\n",
              "      <th>scores</th>\n",
              "      <th>vader_prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2444</th>\n",
              "      <td>china-southern-airlines</td>\n",
              "      <td>/airline-reviews/china-southern-airlines</td>\n",
              "      <td>W Kong</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2014-04-27</td>\n",
              "      <td>CZ325 25 April 2014. I flew from Sydney to Gua...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.038, 'neu': 0.874, 'pos': 0.087, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4839</th>\n",
              "      <td>thai-airways</td>\n",
              "      <td>/airline-reviews/thai-airways</td>\n",
              "      <td>Brett Wood</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2013-10-01</td>\n",
              "      <td>BKK to SYD. Again no AVOD system. After contac...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>{'neg': 0.082, 'neu': 0.845, 'pos': 0.073, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1095</th>\n",
              "      <td>air-india</td>\n",
              "      <td>/airline-reviews/air-india</td>\n",
              "      <td>R McLafferty</td>\n",
              "      <td>United States</td>\n",
              "      <td>2012-12-25</td>\n",
              "      <td>Business class from Singapore to Delhi on an A...</td>\n",
              "      <td>Business Class</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.036, 'neu': 0.91, 'pos': 0.053, 'com...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3792</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>P Saowarat</td>\n",
              "      <td>Thailand</td>\n",
              "      <td>2014-08-20</td>\n",
              "      <td>June 14 2014 flight 731. Everything was fine o...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.134, 'neu': 0.727, 'pos': 0.139, 'co...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3615</th>\n",
              "      <td>malaysia-airlines</td>\n",
              "      <td>/airline-reviews/malaysia-airlines</td>\n",
              "      <td>Yem Ju</td>\n",
              "      <td>Japan</td>\n",
              "      <td>2013-11-25</td>\n",
              "      <td>Flew NRT-KUL on the Boeing 777-200. It was a m...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.752, 'pos': 0.248, 'comp...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4559</th>\n",
              "      <td>singapore-airlines</td>\n",
              "      <td>/airline-reviews/singapore-airlines</td>\n",
              "      <td>Stephen Santoso</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2013-09-03</td>\n",
              "      <td>AMS-SIN-CGK. Flight was on time. Arrived at Si...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.039, 'neu': 0.746, 'pos': 0.215, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>163</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Alan Ward</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2013-05-19</td>\n",
              "      <td>I flew from Singapore to Jakarta on May 14th a...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.013, 'neu': 0.785, 'pos': 0.201, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>692</th>\n",
              "      <td>air-china</td>\n",
              "      <td>/airline-reviews/air-china</td>\n",
              "      <td>Gael Dufoyet</td>\n",
              "      <td>France</td>\n",
              "      <td>2013-08-04</td>\n",
              "      <td>CDG-Beijing / Shanghai-CDG. First class on the...</td>\n",
              "      <td>First Class</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.056, 'neu': 0.763, 'pos': 0.181, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2970</th>\n",
              "      <td>korean-air</td>\n",
              "      <td>/airline-reviews/korean-air</td>\n",
              "      <td>Charles Kennedy</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2014-05-08</td>\n",
              "      <td>BKK-ICN-LHR. It seems Korean Air are mostly us...</td>\n",
              "      <td>Business Class</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.041, 'neu': 0.816, 'pos': 0.142, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4608</th>\n",
              "      <td>thai-airways</td>\n",
              "      <td>/airline-reviews/thai-airways</td>\n",
              "      <td>Vignesh Mahadevan</td>\n",
              "      <td>India</td>\n",
              "      <td>2015-07-30</td>\n",
              "      <td>I have traveled Thai Airways almost 12 times i...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.792, 'pos': 0.208, 'comp...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4318</th>\n",
              "      <td>singapore-airlines</td>\n",
              "      <td>/airline-reviews/singapore-airlines</td>\n",
              "      <td>N Kumar</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2014-09-14</td>\n",
              "      <td>SQ 224 and SQ 401 4-5th Sep. Best service. Fle...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.0, 'neu': 0.595, 'pos': 0.405, 'comp...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3737</th>\n",
              "      <td>philippine-airlines</td>\n",
              "      <td>/airline-reviews/philippine-airlines</td>\n",
              "      <td>Aikawa Ichiro</td>\n",
              "      <td>Japan</td>\n",
              "      <td>2015-04-23</td>\n",
              "      <td>I'm a Japanese tourist flown on Tokyo-Manila-K...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.135, 'neu': 0.785, 'pos': 0.08, 'com...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4660</th>\n",
              "      <td>thai-airways</td>\n",
              "      <td>/airline-reviews/thai-airways</td>\n",
              "      <td>M Osiecki</td>\n",
              "      <td>Poland</td>\n",
              "      <td>2015-02-18</td>\n",
              "      <td>BKK-HKT and return. Despite such short flight ...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "      <td>{'neg': 0.043, 'neu': 0.83, 'pos': 0.127, 'com...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2415</th>\n",
              "      <td>china-southern-airlines</td>\n",
              "      <td>/airline-reviews/china-southern-airlines</td>\n",
              "      <td>C Blomfield</td>\n",
              "      <td>New Zealand</td>\n",
              "      <td>2014-07-06</td>\n",
              "      <td>Auckland-Guangzhou-Heathrow-Dublin and returne...</td>\n",
              "      <td>Business Class</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.016, 'neu': 0.894, 'pos': 0.09, 'com...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4186</th>\n",
              "      <td>singapore-airlines</td>\n",
              "      <td>/airline-reviews/singapore-airlines</td>\n",
              "      <td>Michael Wake</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2015-06-27</td>\n",
              "      <td>The experience today at Shanghai Airport was a...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4</td>\n",
              "      <td>{'neg': 0.062, 'neu': 0.914, 'pos': 0.024, 'co...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307</th>\n",
              "      <td>airasia</td>\n",
              "      <td>/airline-reviews/airasia</td>\n",
              "      <td>Magnar Nordal</td>\n",
              "      <td>Thailand</td>\n",
              "      <td>2010-08-21</td>\n",
              "      <td>Bangkok - Yangon - Bangkok. I bought the ticke...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>{'neg': 0.038, 'neu': 0.89, 'pos': 0.072, 'com...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>521</th>\n",
              "      <td>airasia-x</td>\n",
              "      <td>/airline-reviews/airasia-x</td>\n",
              "      <td>A Niphadkar</td>\n",
              "      <td>India</td>\n",
              "      <td>2011-02-17</td>\n",
              "      <td>Mumbai to Kuala Lumpur return. Economy seat co...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.058, 'neu': 0.842, 'pos': 0.1, 'comp...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2260</th>\n",
              "      <td>china-southern-airlines</td>\n",
              "      <td>/airline-reviews/china-southern-airlines</td>\n",
              "      <td>Giulio Granzella</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2015-07-14</td>\n",
              "      <td>PVG-Xian was almost an hour late due to traffi...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>{'neg': 0.068, 'neu': 0.82, 'pos': 0.112, 'com...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4679</th>\n",
              "      <td>thai-airways</td>\n",
              "      <td>/airline-reviews/thai-airways</td>\n",
              "      <td>D Graubard</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014-12-10</td>\n",
              "      <td>TG418 from KUL to BKK and TG 642 from BKK to N...</td>\n",
              "      <td>Business Class</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>{'neg': 0.032, 'neu': 0.752, 'pos': 0.216, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1759</th>\n",
              "      <td>china-airlines</td>\n",
              "      <td>/airline-reviews/china-airlines</td>\n",
              "      <td>C Flores</td>\n",
              "      <td>Austria</td>\n",
              "      <td>2014-06-30</td>\n",
              "      <td>On board service is absolutely minimal. Unfrie...</td>\n",
              "      <td>Economy</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>{'neg': 0.136, 'neu': 0.667, 'pos': 0.196, 'co...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d18f5cd-937c-43ee-8921-db869eefa392')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3d18f5cd-937c-43ee-8921-db869eefa392 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3d18f5cd-937c-43ee-8921-db869eefa392');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = np.array(list(data[\"vader_prediction\"]))"
      ],
      "metadata": {
        "id": "9SV3oSl6aPKj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = []\n",
        "sentences = list(data['content'])\n",
        "for sen in sentences:\n",
        "    x.append(sen)"
      ],
      "metadata": {
        "id": "GISR_S3YYlu3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer = Tokenizer()\n",
        "tokenizer.fit_on_texts(x)"
      ],
      "metadata": {
        "id": "E5OkZ3eQavlt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = tokenizer.texts_to_sequences(x)"
      ],
      "metadata": {
        "id": "VZG7BLu-bE8s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = pad_sequences(x,200)"
      ],
      "metadata": {
        "id": "WU_tQQ12bIT0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(x[400])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-zcm49RbJXT",
        "outputId": "73b2f348-37e0-4081-9aaa-1fc864ce379e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "200"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(x[350])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i8ZgWLTebMR0",
        "outputId": "2c522f7c-686e-4b7e-d27b-08b8ef3420c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "200"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a0iPbUsFdi5b",
        "outputId": "f9a88bd8-7819-43b6-f937-4e24d2d7b30b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4919, 200)"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vocUoobOdlK7",
        "outputId": "36cbffb4-c3e9-4a7c-db8d-8b309567a846"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4919,)"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle = \"false\")"
      ],
      "metadata": {
        "id": "sGQ_VjMQbUY8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vocab_size = len(tokenizer.word_index) + 1"
      ],
      "metadata": {
        "id": "inUZ6-FSbosT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = []\n",
        "model.append(Sequential())\n",
        "model.append(Sequential())\n",
        "embedding = Embedding(vocab_size, 32, input_length=200)\n",
        "for i in range(2):\n",
        "  model[i].add(embedding)\n"
      ],
      "metadata": {
        "id": "YFwCZGrkce7s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dropout = [0.1,0.2]\n",
        "for i in range(2):\n",
        "  model[i].add(Dropout(dropout[i]))\n"
      ],
      "metadata": {
        "id": "DFl91e3Qc13k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lstm = LSTM(50)\n",
        "for i in range(2):\n",
        "  model[i].add(lstm)"
      ],
      "metadata": {
        "id": "SyMxsbahc4pL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  model[i].add(Dense(1, activation='sigmoid'))"
      ],
      "metadata": {
        "id": "FefPHL-Lc7oM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  model[i].compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])"
      ],
      "metadata": {
        "id": "Yhbhj8NKeRJk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  print(model[i].summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2aaLlltleVr0",
        "outputId": "4d7b90d6-8b9a-4503-fc2e-7402fe5e9fb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, 200, 32)           430496    \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 200, 32)           0         \n",
            "                                                                 \n",
            " lstm (LSTM)                 (None, 50)                16600     \n",
            "                                                                 \n",
            " dense (Dense)               (None, 1)                 51        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 447,147\n",
            "Trainable params: 447,147\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, 200, 32)           430496    \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 200, 32)           0         \n",
            "                                                                 \n",
            " lstm (LSTM)                 (None, 50)                16600     \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 1)                 51        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 447,147\n",
            "Trainable params: 447,147\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  history = model[i].fit(x_train, y_train, batch_size=128, epochs=10, validation_split=0.2, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3ILtgXH9eee7",
        "outputId": "68e2010f-ca00-4154-9fae-525593b24c5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "25/25 [==============================] - 11s 318ms/step - loss: 0.6125 - acc: 0.7382 - val_loss: 0.5465 - val_acc: 0.7586\n",
            "Epoch 2/10\n",
            "25/25 [==============================] - 5s 216ms/step - loss: 0.5324 - acc: 0.7484 - val_loss: 0.5010 - val_acc: 0.7586\n",
            "Epoch 3/10\n",
            "25/25 [==============================] - 6s 251ms/step - loss: 0.3961 - acc: 0.7948 - val_loss: 0.3924 - val_acc: 0.8107\n",
            "Epoch 4/10\n",
            "25/25 [==============================] - 6s 247ms/step - loss: 0.2515 - acc: 0.9155 - val_loss: 0.3580 - val_acc: 0.8666\n",
            "Epoch 5/10\n",
            "25/25 [==============================] - 5s 216ms/step - loss: 0.1649 - acc: 0.9524 - val_loss: 0.4123 - val_acc: 0.8488\n",
            "Epoch 6/10\n",
            "25/25 [==============================] - 7s 295ms/step - loss: 0.1032 - acc: 0.9692 - val_loss: 0.4061 - val_acc: 0.8513\n",
            "Epoch 7/10\n",
            "25/25 [==============================] - 5s 216ms/step - loss: 0.0633 - acc: 0.9844 - val_loss: 0.4375 - val_acc: 0.8526\n",
            "Epoch 8/10\n",
            "25/25 [==============================] - 7s 297ms/step - loss: 0.0408 - acc: 0.9905 - val_loss: 0.4515 - val_acc: 0.8437\n",
            "Epoch 9/10\n",
            "25/25 [==============================] - 5s 218ms/step - loss: 0.0262 - acc: 0.9949 - val_loss: 0.4991 - val_acc: 0.8424\n",
            "Epoch 10/10\n",
            "25/25 [==============================] - 6s 243ms/step - loss: 0.0169 - acc: 0.9968 - val_loss: 0.5882 - val_acc: 0.8183\n",
            "Epoch 1/10\n",
            "25/25 [==============================] - 9s 238ms/step - loss: 0.4059 - acc: 0.8907 - val_loss: 0.4207 - val_acc: 0.8158\n",
            "Epoch 2/10\n",
            "25/25 [==============================] - 7s 273ms/step - loss: 0.1120 - acc: 0.9965 - val_loss: 0.4704 - val_acc: 0.8208\n",
            "Epoch 3/10\n",
            "25/25 [==============================] - 6s 230ms/step - loss: 0.0789 - acc: 0.9832 - val_loss: 0.5441 - val_acc: 0.8107\n",
            "Epoch 4/10\n",
            "25/25 [==============================] - 5s 212ms/step - loss: 0.0596 - acc: 0.9927 - val_loss: 0.4739 - val_acc: 0.8119\n",
            "Epoch 5/10\n",
            "25/25 [==============================] - 7s 285ms/step - loss: 0.0297 - acc: 0.9997 - val_loss: 0.5106 - val_acc: 0.8221\n",
            "Epoch 6/10\n",
            "25/25 [==============================] - 5s 219ms/step - loss: 0.0201 - acc: 1.0000 - val_loss: 0.5593 - val_acc: 0.8297\n",
            "Epoch 7/10\n",
            "25/25 [==============================] - 7s 290ms/step - loss: 0.0154 - acc: 1.0000 - val_loss: 0.5965 - val_acc: 0.8310\n",
            "Epoch 8/10\n",
            "25/25 [==============================] - 5s 218ms/step - loss: 0.0122 - acc: 1.0000 - val_loss: 0.6168 - val_acc: 0.8208\n",
            "Epoch 9/10\n",
            "25/25 [==============================] - 6s 252ms/step - loss: 0.0100 - acc: 1.0000 - val_loss: 0.6703 - val_acc: 0.8183\n",
            "Epoch 10/10\n",
            "25/25 [==============================] - 6s 233ms/step - loss: 0.0084 - acc: 1.0000 - val_loss: 0.6763 - val_acc: 0.8183\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = []\n",
        "for i in range(2):\n",
        "    print(\"Model\",i)\n",
        "    results = model[i].evaluate(x_test,y_test ,batch_size=128)\n",
        "    y_pred.append(model[i].predict(x_test))\n",
        "    print(\"+++++++++++++++++++++++++++++++++++++++++++++++++++++++\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9iB7W41Olc20",
        "outputId": "b50f054f-c470-4744-adef-5d87a8dd7c9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model 0\n",
            "8/8 [==============================] - 1s 62ms/step - loss: 0.4074 - acc: 0.8608\n",
            "31/31 [==============================] - 1s 27ms/step\n",
            "+++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
            "Model 1\n",
            "8/8 [==============================] - 1s 65ms/step - loss: 0.5635 - acc: 0.8567\n",
            "31/31 [==============================] - 1s 26ms/step\n",
            "+++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history_dict = history.history\n",
        "history_dict.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aIvnZYUl9cuh",
        "outputId": "f7767d5d-c632-4d18-cf05-c5f3381417f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['loss', 'acc', 'val_loss', 'val_acc'])"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "acc = history_dict['acc']\n",
        "val_acc = history_dict['val_acc']\n",
        "loss = history_dict['loss']\n",
        "val_loss = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(acc) + 1)"
      ],
      "metadata": {
        "id": "qEyjEAVM9i1c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, loss, 'r', label='Training loss')\n",
        "#plt.plot(epochs, val_loss, 'r', label='Validation loss')\n",
        "plt.title('Training loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "S8I91FHJBMK1",
        "outputId": "2bca618a-a1fc-4221-f215-8a5963b0a278"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, acc, 'r', label='Training acc')\n",
        "#plt.plot(epochs, val_acc, 'r', label='Validation acc')\n",
        "plt.title('Training accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend(loc='lower right')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "f4KRB9GOBy8i",
        "outputId": "4de54438-df94-4892-ab76-b2ffbe5fd279"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  Train_pred1 = model[0].predict(x_train)\n",
        "  Train_pred2 = model[1].predict(x_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jRQCR63eqZKh",
        "outputId": "9602f368-5244-42da-84e2-141e2b67f831"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "123/123 [==============================] - 5s 38ms/step\n",
            "123/123 [==============================] - 4s 34ms/step\n",
            "123/123 [==============================] - 4s 31ms/step\n",
            "123/123 [==============================] - 3s 27ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Train_pred1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d_ODpmAAPQ2D",
        "outputId": "21d35fa1-debb-44e6-eca3-608bd5d42816"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.9113043 ]\n",
            " [0.90823793]\n",
            " [0.01195483]\n",
            " ...\n",
            " [0.00940316]\n",
            " [0.75895876]\n",
            " [0.00891713]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(Train_pred1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BSULkGcWpHc",
        "outputId": "f361a02e-7f1d-4aa3-eebb-174414f13d1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3935"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Train_pred2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-lKSqb2U5RgA",
        "outputId": "ee79ff00-de2d-411c-d8b3-07582d6d92f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.98583984]\n",
            " [0.98331445]\n",
            " [0.0050908 ]\n",
            " ...\n",
            " [0.00477315]\n",
            " [0.8844749 ]\n",
            " [0.00431291]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  Test_pred1 = model[0].predict(x_test)\n",
        "  Test_pred2 = model[1].predict(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrQJmvODt1dw",
        "outputId": "f6720b43-ef25-4cda-d64a-ee9e31a13320"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "31/31 [==============================] - 1s 28ms/step\n",
            "31/31 [==============================] - 1s 27ms/step\n",
            "31/31 [==============================] - 1s 27ms/step\n",
            "31/31 [==============================] - 1s 28ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Test_pred1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kz76M137WMmm",
        "outputId": "ba1000e7-4ce8-4ba8-f64e-42e564d1f464"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.8177539 ]\n",
            " [0.00888899]\n",
            " [0.04541729]\n",
            " [0.00818035]\n",
            " [0.00395686]\n",
            " [0.00671379]\n",
            " [0.00708254]\n",
            " [0.00880519]\n",
            " [0.02620043]\n",
            " [0.00876139]\n",
            " [0.00458863]\n",
            " [0.01736368]\n",
            " [0.00811205]\n",
            " [0.00745465]\n",
            " [0.00417422]\n",
            " [0.01459903]\n",
            " [0.01046899]\n",
            " [0.06593704]\n",
            " [0.69665253]\n",
            " [0.00598163]\n",
            " [0.9511974 ]\n",
            " [0.12455182]\n",
            " [0.0105849 ]\n",
            " [0.95124793]\n",
            " [0.00733946]\n",
            " [0.04339739]\n",
            " [0.02630862]\n",
            " [0.00943349]\n",
            " [0.86270356]\n",
            " [0.00794575]\n",
            " [0.0086351 ]\n",
            " [0.01517567]\n",
            " [0.19098498]\n",
            " [0.00610494]\n",
            " [0.01173911]\n",
            " [0.31706753]\n",
            " [0.0077711 ]\n",
            " [0.02051052]\n",
            " [0.01334281]\n",
            " [0.02191559]\n",
            " [0.8991725 ]\n",
            " [0.12443486]\n",
            " [0.0118438 ]\n",
            " [0.00773302]\n",
            " [0.9506075 ]\n",
            " [0.00803683]\n",
            " [0.9345692 ]\n",
            " [0.9468392 ]\n",
            " [0.02091851]\n",
            " [0.01333654]\n",
            " [0.00441113]\n",
            " [0.00362049]\n",
            " [0.01591855]\n",
            " [0.8196969 ]\n",
            " [0.80588526]\n",
            " [0.03035117]\n",
            " [0.00661145]\n",
            " [0.00948608]\n",
            " [0.009316  ]\n",
            " [0.00508963]\n",
            " [0.01254557]\n",
            " [0.00594863]\n",
            " [0.9391054 ]\n",
            " [0.17413253]\n",
            " [0.00616368]\n",
            " [0.01552686]\n",
            " [0.00957622]\n",
            " [0.00961848]\n",
            " [0.01735385]\n",
            " [0.90836895]\n",
            " [0.9521236 ]\n",
            " [0.01941682]\n",
            " [0.5080996 ]\n",
            " [0.08992562]\n",
            " [0.00902057]\n",
            " [0.00552538]\n",
            " [0.0100698 ]\n",
            " [0.00561613]\n",
            " [0.03661529]\n",
            " [0.9451656 ]\n",
            " [0.00504285]\n",
            " [0.08162639]\n",
            " [0.00658362]\n",
            " [0.00698136]\n",
            " [0.00628995]\n",
            " [0.01919406]\n",
            " [0.02654056]\n",
            " [0.01205801]\n",
            " [0.53480417]\n",
            " [0.02191033]\n",
            " [0.00986921]\n",
            " [0.94767857]\n",
            " [0.94616884]\n",
            " [0.03897619]\n",
            " [0.00986504]\n",
            " [0.5755601 ]\n",
            " [0.06603075]\n",
            " [0.80255467]\n",
            " [0.01511955]\n",
            " [0.02998209]\n",
            " [0.03417451]\n",
            " [0.01085196]\n",
            " [0.9074802 ]\n",
            " [0.02190633]\n",
            " [0.00583229]\n",
            " [0.00379734]\n",
            " [0.0068338 ]\n",
            " [0.01938408]\n",
            " [0.00601164]\n",
            " [0.93659705]\n",
            " [0.01211241]\n",
            " [0.936888  ]\n",
            " [0.1526602 ]\n",
            " [0.01148887]\n",
            " [0.00764314]\n",
            " [0.02542797]\n",
            " [0.01224673]\n",
            " [0.00309694]\n",
            " [0.9296329 ]\n",
            " [0.00530026]\n",
            " [0.0123452 ]\n",
            " [0.00523229]\n",
            " [0.92507005]\n",
            " [0.9333852 ]\n",
            " [0.00805341]\n",
            " [0.00797286]\n",
            " [0.9159321 ]\n",
            " [0.02859227]\n",
            " [0.47383785]\n",
            " [0.00958122]\n",
            " [0.89917445]\n",
            " [0.0060357 ]\n",
            " [0.05585403]\n",
            " [0.01486507]\n",
            " [0.02604146]\n",
            " [0.0083719 ]\n",
            " [0.30678985]\n",
            " [0.34187636]\n",
            " [0.95738995]\n",
            " [0.00963792]\n",
            " [0.60046405]\n",
            " [0.00516303]\n",
            " [0.02294555]\n",
            " [0.02139808]\n",
            " [0.01010089]\n",
            " [0.01057401]\n",
            " [0.04941542]\n",
            " [0.11005903]\n",
            " [0.01668948]\n",
            " [0.00799007]\n",
            " [0.8255381 ]\n",
            " [0.9505628 ]\n",
            " [0.01112184]\n",
            " [0.0120201 ]\n",
            " [0.0886367 ]\n",
            " [0.00573046]\n",
            " [0.91518635]\n",
            " [0.14642514]\n",
            " [0.01250845]\n",
            " [0.01838597]\n",
            " [0.0128511 ]\n",
            " [0.9437859 ]\n",
            " [0.00839173]\n",
            " [0.01388091]\n",
            " [0.11418679]\n",
            " [0.01337138]\n",
            " [0.06625732]\n",
            " [0.00557694]\n",
            " [0.0077597 ]\n",
            " [0.00763476]\n",
            " [0.00667183]\n",
            " [0.00630629]\n",
            " [0.00932211]\n",
            " [0.9234483 ]\n",
            " [0.00485131]\n",
            " [0.03319081]\n",
            " [0.00632173]\n",
            " [0.9369703 ]\n",
            " [0.00306132]\n",
            " [0.0120902 ]\n",
            " [0.01245714]\n",
            " [0.00966631]\n",
            " [0.9081552 ]\n",
            " [0.9330987 ]\n",
            " [0.01063505]\n",
            " [0.02499611]\n",
            " [0.02335554]\n",
            " [0.86605084]\n",
            " [0.01645571]\n",
            " [0.00805311]\n",
            " [0.00519884]\n",
            " [0.01454005]\n",
            " [0.01280414]\n",
            " [0.01687109]\n",
            " [0.9522637 ]\n",
            " [0.00958879]\n",
            " [0.00489798]\n",
            " [0.01658335]\n",
            " [0.00519505]\n",
            " [0.01869858]\n",
            " [0.8997819 ]\n",
            " [0.01955589]\n",
            " [0.9603945 ]\n",
            " [0.8746919 ]\n",
            " [0.01051447]\n",
            " [0.01022507]\n",
            " [0.00685778]\n",
            " [0.94314057]\n",
            " [0.00572775]\n",
            " [0.03311163]\n",
            " [0.00953837]\n",
            " [0.16119422]\n",
            " [0.01661924]\n",
            " [0.12209503]\n",
            " [0.95021397]\n",
            " [0.01040299]\n",
            " [0.00272721]\n",
            " [0.95487344]\n",
            " [0.95540243]\n",
            " [0.00928496]\n",
            " [0.7864716 ]\n",
            " [0.87177294]\n",
            " [0.01142539]\n",
            " [0.0075831 ]\n",
            " [0.3031936 ]\n",
            " [0.7806879 ]\n",
            " [0.95670533]\n",
            " [0.91176087]\n",
            " [0.91873103]\n",
            " [0.01289836]\n",
            " [0.8181553 ]\n",
            " [0.01423169]\n",
            " [0.9170152 ]\n",
            " [0.9480363 ]\n",
            " [0.03332837]\n",
            " [0.01673546]\n",
            " [0.9539425 ]\n",
            " [0.0086832 ]\n",
            " [0.95140004]\n",
            " [0.07692169]\n",
            " [0.5728673 ]\n",
            " [0.01062225]\n",
            " [0.00605964]\n",
            " [0.01922802]\n",
            " [0.00656008]\n",
            " [0.04303844]\n",
            " [0.02891229]\n",
            " [0.01624651]\n",
            " [0.01508542]\n",
            " [0.01313762]\n",
            " [0.01596528]\n",
            " [0.00959928]\n",
            " [0.9049062 ]\n",
            " [0.01354613]\n",
            " [0.01204189]\n",
            " [0.94259274]\n",
            " [0.01535555]\n",
            " [0.00793405]\n",
            " [0.00816688]\n",
            " [0.01260697]\n",
            " [0.01198649]\n",
            " [0.00846868]\n",
            " [0.00956266]\n",
            " [0.0232955 ]\n",
            " [0.9058775 ]\n",
            " [0.02099728]\n",
            " [0.01365892]\n",
            " [0.00658847]\n",
            " [0.00857942]\n",
            " [0.01347409]\n",
            " [0.9080886 ]\n",
            " [0.91033834]\n",
            " [0.00609127]\n",
            " [0.00640321]\n",
            " [0.00915823]\n",
            " [0.00558208]\n",
            " [0.9334184 ]\n",
            " [0.01053096]\n",
            " [0.00327397]\n",
            " [0.01371857]\n",
            " [0.0328134 ]\n",
            " [0.01319099]\n",
            " [0.01102121]\n",
            " [0.01206719]\n",
            " [0.00809504]\n",
            " [0.9268319 ]\n",
            " [0.00508693]\n",
            " [0.05092948]\n",
            " [0.00717268]\n",
            " [0.9169868 ]\n",
            " [0.00759487]\n",
            " [0.0102224 ]\n",
            " [0.93705124]\n",
            " [0.6693761 ]\n",
            " [0.00850997]\n",
            " [0.00718713]\n",
            " [0.01020091]\n",
            " [0.05421184]\n",
            " [0.05881132]\n",
            " [0.08207297]\n",
            " [0.0041676 ]\n",
            " [0.01890444]\n",
            " [0.00887569]\n",
            " [0.90496063]\n",
            " [0.9138388 ]\n",
            " [0.009144  ]\n",
            " [0.48831707]\n",
            " [0.00747699]\n",
            " [0.8906678 ]\n",
            " [0.49595195]\n",
            " [0.00466849]\n",
            " [0.0063599 ]\n",
            " [0.00565503]\n",
            " [0.0130309 ]\n",
            " [0.02799978]\n",
            " [0.00530093]\n",
            " [0.00980508]\n",
            " [0.00829965]\n",
            " [0.01849981]\n",
            " [0.01058701]\n",
            " [0.7088293 ]\n",
            " [0.00650626]\n",
            " [0.00756961]\n",
            " [0.9016483 ]\n",
            " [0.0580116 ]\n",
            " [0.00643595]\n",
            " [0.00793865]\n",
            " [0.01084662]\n",
            " [0.01473934]\n",
            " [0.0125613 ]\n",
            " [0.90234727]\n",
            " [0.00925935]\n",
            " [0.01169233]\n",
            " [0.00429953]\n",
            " [0.6968453 ]\n",
            " [0.8799345 ]\n",
            " [0.00858402]\n",
            " [0.00913382]\n",
            " [0.00683211]\n",
            " [0.9426299 ]\n",
            " [0.01145105]\n",
            " [0.06954599]\n",
            " [0.0187045 ]\n",
            " [0.8588444 ]\n",
            " [0.01336625]\n",
            " [0.00538081]\n",
            " [0.91674924]\n",
            " [0.01181992]\n",
            " [0.8949379 ]\n",
            " [0.00844045]\n",
            " [0.01107154]\n",
            " [0.95667344]\n",
            " [0.14162388]\n",
            " [0.02080343]\n",
            " [0.01039985]\n",
            " [0.00739223]\n",
            " [0.07189827]\n",
            " [0.01464302]\n",
            " [0.8114313 ]\n",
            " [0.00683656]\n",
            " [0.96124804]\n",
            " [0.01262163]\n",
            " [0.00660238]\n",
            " [0.00785903]\n",
            " [0.00582825]\n",
            " [0.01318662]\n",
            " [0.01730733]\n",
            " [0.01297333]\n",
            " [0.8019    ]\n",
            " [0.02144622]\n",
            " [0.01162226]\n",
            " [0.72476315]\n",
            " [0.01368444]\n",
            " [0.0072844 ]\n",
            " [0.11507852]\n",
            " [0.00533951]\n",
            " [0.01066894]\n",
            " [0.02299032]\n",
            " [0.01171772]\n",
            " [0.91853046]\n",
            " [0.03673168]\n",
            " [0.11043986]\n",
            " [0.00471286]\n",
            " [0.04662332]\n",
            " [0.12494008]\n",
            " [0.0065402 ]\n",
            " [0.00736903]\n",
            " [0.01096188]\n",
            " [0.03257587]\n",
            " [0.00563607]\n",
            " [0.0137484 ]\n",
            " [0.00980901]\n",
            " [0.24494462]\n",
            " [0.06666274]\n",
            " [0.00586957]\n",
            " [0.01494781]\n",
            " [0.9267679 ]\n",
            " [0.00946455]\n",
            " [0.01199329]\n",
            " [0.04654041]\n",
            " [0.01744997]\n",
            " [0.88588923]\n",
            " [0.01300571]\n",
            " [0.01241943]\n",
            " [0.01496333]\n",
            " [0.00976831]\n",
            " [0.00523506]\n",
            " [0.01309192]\n",
            " [0.01809413]\n",
            " [0.00730861]\n",
            " [0.02793862]\n",
            " [0.27046284]\n",
            " [0.04972605]\n",
            " [0.02193294]\n",
            " [0.05678893]\n",
            " [0.00735021]\n",
            " [0.01434173]\n",
            " [0.84194267]\n",
            " [0.94669837]\n",
            " [0.00920404]\n",
            " [0.0154867 ]\n",
            " [0.00975506]\n",
            " [0.89073294]\n",
            " [0.00577628]\n",
            " [0.00833643]\n",
            " [0.00747677]\n",
            " [0.00795637]\n",
            " [0.9400462 ]\n",
            " [0.01069269]\n",
            " [0.01314952]\n",
            " [0.00869543]\n",
            " [0.00944281]\n",
            " [0.01789954]\n",
            " [0.00572289]\n",
            " [0.0080569 ]\n",
            " [0.00843303]\n",
            " [0.01458267]\n",
            " [0.95075077]\n",
            " [0.00975547]\n",
            " [0.6198601 ]\n",
            " [0.02178732]\n",
            " [0.9019663 ]\n",
            " [0.04885405]\n",
            " [0.00855562]\n",
            " [0.00324964]\n",
            " [0.0051405 ]\n",
            " [0.90153235]\n",
            " [0.00675283]\n",
            " [0.00626035]\n",
            " [0.01027545]\n",
            " [0.05070906]\n",
            " [0.00535552]\n",
            " [0.00743967]\n",
            " [0.00486614]\n",
            " [0.01406906]\n",
            " [0.02168091]\n",
            " [0.9483358 ]\n",
            " [0.00757652]\n",
            " [0.937654  ]\n",
            " [0.00421096]\n",
            " [0.01188633]\n",
            " [0.0158142 ]\n",
            " [0.00942671]\n",
            " [0.8167604 ]\n",
            " [0.8866199 ]\n",
            " [0.97434074]\n",
            " [0.00836872]\n",
            " [0.00670961]\n",
            " [0.00947732]\n",
            " [0.00819905]\n",
            " [0.8286198 ]\n",
            " [0.06120812]\n",
            " [0.00987038]\n",
            " [0.00880193]\n",
            " [0.5306837 ]\n",
            " [0.00951289]\n",
            " [0.0051246 ]\n",
            " [0.01504238]\n",
            " [0.06439843]\n",
            " [0.47443274]\n",
            " [0.00992536]\n",
            " [0.00835492]\n",
            " [0.0047199 ]\n",
            " [0.00913357]\n",
            " [0.01380525]\n",
            " [0.9527935 ]\n",
            " [0.06048884]\n",
            " [0.01008314]\n",
            " [0.01839653]\n",
            " [0.00746834]\n",
            " [0.00591899]\n",
            " [0.00412109]\n",
            " [0.03945991]\n",
            " [0.02416142]\n",
            " [0.00519719]\n",
            " [0.00630504]\n",
            " [0.01054621]\n",
            " [0.01370138]\n",
            " [0.0072015 ]\n",
            " [0.0085039 ]\n",
            " [0.01370913]\n",
            " [0.0288709 ]\n",
            " [0.00933804]\n",
            " [0.00652004]\n",
            " [0.0104587 ]\n",
            " [0.01217773]\n",
            " [0.01122636]\n",
            " [0.00526091]\n",
            " [0.00605814]\n",
            " [0.01186865]\n",
            " [0.00678908]\n",
            " [0.0098993 ]\n",
            " [0.01431475]\n",
            " [0.04393549]\n",
            " [0.00864612]\n",
            " [0.00534388]\n",
            " [0.94745046]\n",
            " [0.9380609 ]\n",
            " [0.01105524]\n",
            " [0.22923748]\n",
            " [0.01032715]\n",
            " [0.00451677]\n",
            " [0.00679442]\n",
            " [0.00675366]\n",
            " [0.00591977]\n",
            " [0.08065006]\n",
            " [0.0040984 ]\n",
            " [0.01356311]\n",
            " [0.78212774]\n",
            " [0.01304493]\n",
            " [0.0100889 ]\n",
            " [0.00729223]\n",
            " [0.00527253]\n",
            " [0.00771268]\n",
            " [0.0153614 ]\n",
            " [0.01515879]\n",
            " [0.8112468 ]\n",
            " [0.01036171]\n",
            " [0.00591371]\n",
            " [0.00422811]\n",
            " [0.90839094]\n",
            " [0.82178634]\n",
            " [0.10226623]\n",
            " [0.95114017]\n",
            " [0.8920956 ]\n",
            " [0.9169933 ]\n",
            " [0.0070035 ]\n",
            " [0.01126383]\n",
            " [0.01762767]\n",
            " [0.00900224]\n",
            " [0.76478237]\n",
            " [0.13856693]\n",
            " [0.93697244]\n",
            " [0.01740238]\n",
            " [0.8760831 ]\n",
            " [0.00739139]\n",
            " [0.01020152]\n",
            " [0.01353873]\n",
            " [0.95982903]\n",
            " [0.00856852]\n",
            " [0.0141135 ]\n",
            " [0.00736803]\n",
            " [0.00604884]\n",
            " [0.9325232 ]\n",
            " [0.4862619 ]\n",
            " [0.09134604]\n",
            " [0.01315368]\n",
            " [0.00734288]\n",
            " [0.00782963]\n",
            " [0.8875339 ]\n",
            " [0.8600453 ]\n",
            " [0.02406049]\n",
            " [0.01159285]\n",
            " [0.914534  ]\n",
            " [0.02012021]\n",
            " [0.00554286]\n",
            " [0.01289625]\n",
            " [0.9324852 ]\n",
            " [0.886301  ]\n",
            " [0.550599  ]\n",
            " [0.8780088 ]\n",
            " [0.06635374]\n",
            " [0.01051474]\n",
            " [0.006917  ]\n",
            " [0.00912302]\n",
            " [0.02160289]\n",
            " [0.0065608 ]\n",
            " [0.08895957]\n",
            " [0.01398264]\n",
            " [0.0111718 ]\n",
            " [0.00959288]\n",
            " [0.90236646]\n",
            " [0.19645563]\n",
            " [0.03598323]\n",
            " [0.00801152]\n",
            " [0.81763846]\n",
            " [0.01116474]\n",
            " [0.60362536]\n",
            " [0.9330727 ]\n",
            " [0.00415959]\n",
            " [0.8870669 ]\n",
            " [0.93449426]\n",
            " [0.9125433 ]\n",
            " [0.00632541]\n",
            " [0.01601845]\n",
            " [0.0120475 ]\n",
            " [0.90010804]\n",
            " [0.00844757]\n",
            " [0.00782983]\n",
            " [0.01209082]\n",
            " [0.01767699]\n",
            " [0.08488272]\n",
            " [0.01643003]\n",
            " [0.0046414 ]\n",
            " [0.00699869]\n",
            " [0.01161779]\n",
            " [0.8808698 ]\n",
            " [0.01904205]\n",
            " [0.02819311]\n",
            " [0.06388102]\n",
            " [0.00873019]\n",
            " [0.6431413 ]\n",
            " [0.00600159]\n",
            " [0.00775329]\n",
            " [0.01716207]\n",
            " [0.00702113]\n",
            " [0.89924   ]\n",
            " [0.01350717]\n",
            " [0.03204431]\n",
            " [0.952391  ]\n",
            " [0.01321097]\n",
            " [0.00695296]\n",
            " [0.7343137 ]\n",
            " [0.0058243 ]\n",
            " [0.02709684]\n",
            " [0.00324451]\n",
            " [0.00484592]\n",
            " [0.01066938]\n",
            " [0.01036882]\n",
            " [0.01146511]\n",
            " [0.00936379]\n",
            " [0.01105777]\n",
            " [0.01188003]\n",
            " [0.00500015]\n",
            " [0.14183913]\n",
            " [0.91486937]\n",
            " [0.36863002]\n",
            " [0.00819463]\n",
            " [0.03002214]\n",
            " [0.81180835]\n",
            " [0.9551527 ]\n",
            " [0.00714493]\n",
            " [0.8366788 ]\n",
            " [0.9356195 ]\n",
            " [0.00603338]\n",
            " [0.00986058]\n",
            " [0.00498029]\n",
            " [0.00518147]\n",
            " [0.00616704]\n",
            " [0.8653849 ]\n",
            " [0.01195866]\n",
            " [0.31496164]\n",
            " [0.00930481]\n",
            " [0.02210369]\n",
            " [0.00533603]\n",
            " [0.02070836]\n",
            " [0.00710093]\n",
            " [0.00914301]\n",
            " [0.8334558 ]\n",
            " [0.0180099 ]\n",
            " [0.00737569]\n",
            " [0.00369565]\n",
            " [0.9263084 ]\n",
            " [0.95021987]\n",
            " [0.35712802]\n",
            " [0.01159071]\n",
            " [0.5924957 ]\n",
            " [0.7090368 ]\n",
            " [0.00773879]\n",
            " [0.01861553]\n",
            " [0.01955569]\n",
            " [0.00489562]\n",
            " [0.0115436 ]\n",
            " [0.00999326]\n",
            " [0.01022837]\n",
            " [0.04850109]\n",
            " [0.90224206]\n",
            " [0.00664363]\n",
            " [0.00673677]\n",
            " [0.00394624]\n",
            " [0.00549973]\n",
            " [0.00691007]\n",
            " [0.01207975]\n",
            " [0.00850269]\n",
            " [0.93916386]\n",
            " [0.95702183]\n",
            " [0.0072852 ]\n",
            " [0.00658088]\n",
            " [0.00869114]\n",
            " [0.00431045]\n",
            " [0.9607402 ]\n",
            " [0.0194125 ]\n",
            " [0.01046695]\n",
            " [0.00931533]\n",
            " [0.00489685]\n",
            " [0.01012907]\n",
            " [0.01477323]\n",
            " [0.01005484]\n",
            " [0.95050746]\n",
            " [0.01232457]\n",
            " [0.01284681]\n",
            " [0.01771395]\n",
            " [0.02792127]\n",
            " [0.95008206]\n",
            " [0.00597111]\n",
            " [0.01219952]\n",
            " [0.01232941]\n",
            " [0.00808189]\n",
            " [0.00559654]\n",
            " [0.00746943]\n",
            " [0.00969798]\n",
            " [0.00678094]\n",
            " [0.01034375]\n",
            " [0.00696482]\n",
            " [0.00754656]\n",
            " [0.04576306]\n",
            " [0.07724541]\n",
            " [0.01065108]\n",
            " [0.00383608]\n",
            " [0.00677759]\n",
            " [0.45451006]\n",
            " [0.01752851]\n",
            " [0.00785519]\n",
            " [0.0102054 ]\n",
            " [0.88261706]\n",
            " [0.01313473]\n",
            " [0.07618211]\n",
            " [0.01225968]\n",
            " [0.9077516 ]\n",
            " [0.00662676]\n",
            " [0.00574171]\n",
            " [0.9224755 ]\n",
            " [0.38009182]\n",
            " [0.00929855]\n",
            " [0.9565424 ]\n",
            " [0.007615  ]\n",
            " [0.01534188]\n",
            " [0.01210645]\n",
            " [0.0101035 ]\n",
            " [0.00631146]\n",
            " [0.00930457]\n",
            " [0.04273273]\n",
            " [0.79782027]\n",
            " [0.0221934 ]\n",
            " [0.17955528]\n",
            " [0.83569956]\n",
            " [0.01229455]\n",
            " [0.01729072]\n",
            " [0.9243935 ]\n",
            " [0.02149968]\n",
            " [0.9182045 ]\n",
            " [0.92088467]\n",
            " [0.00712252]\n",
            " [0.00505587]\n",
            " [0.9321443 ]\n",
            " [0.00556468]\n",
            " [0.95533   ]\n",
            " [0.9339678 ]\n",
            " [0.00876538]\n",
            " [0.00483046]\n",
            " [0.00963855]\n",
            " [0.00865556]\n",
            " [0.01461644]\n",
            " [0.9027561 ]\n",
            " [0.00593751]\n",
            " [0.9085182 ]\n",
            " [0.9309676 ]\n",
            " [0.01453663]\n",
            " [0.01070385]\n",
            " [0.00355059]\n",
            " [0.1659449 ]\n",
            " [0.00759063]\n",
            " [0.9419208 ]\n",
            " [0.0187267 ]\n",
            " [0.00539344]\n",
            " [0.04472717]\n",
            " [0.28935367]\n",
            " [0.02067586]\n",
            " [0.00390351]\n",
            " [0.0690858 ]\n",
            " [0.02686777]\n",
            " [0.01017098]\n",
            " [0.01017921]\n",
            " [0.00438306]\n",
            " [0.01088965]\n",
            " [0.01087266]\n",
            " [0.01331487]\n",
            " [0.09970414]\n",
            " [0.01549103]\n",
            " [0.00884393]\n",
            " [0.00994422]\n",
            " [0.7550557 ]\n",
            " [0.00388845]\n",
            " [0.01182633]\n",
            " [0.9248325 ]\n",
            " [0.03849494]\n",
            " [0.00511169]\n",
            " [0.02429043]\n",
            " [0.02179294]\n",
            " [0.00768682]\n",
            " [0.9348721 ]\n",
            " [0.07159474]\n",
            " [0.01198713]\n",
            " [0.9199652 ]\n",
            " [0.00787772]\n",
            " [0.04165643]\n",
            " [0.80913323]\n",
            " [0.7088602 ]\n",
            " [0.8023149 ]\n",
            " [0.9271464 ]\n",
            " [0.01216566]\n",
            " [0.01924983]\n",
            " [0.9475385 ]\n",
            " [0.00777901]\n",
            " [0.9210563 ]\n",
            " [0.70419395]\n",
            " [0.00654721]\n",
            " [0.01186144]\n",
            " [0.03988505]\n",
            " [0.00514585]\n",
            " [0.05125156]\n",
            " [0.02933397]\n",
            " [0.00533828]\n",
            " [0.00632943]\n",
            " [0.03666164]\n",
            " [0.01729395]\n",
            " [0.00784948]\n",
            " [0.01576325]\n",
            " [0.01975805]\n",
            " [0.01255812]\n",
            " [0.00591679]\n",
            " [0.04898227]\n",
            " [0.9557303 ]\n",
            " [0.01147101]\n",
            " [0.11695997]\n",
            " [0.65991306]\n",
            " [0.00699198]\n",
            " [0.00724797]\n",
            " [0.33068666]\n",
            " [0.03772819]\n",
            " [0.00632816]\n",
            " [0.02587166]\n",
            " [0.91095877]\n",
            " [0.01058352]\n",
            " [0.02767311]\n",
            " [0.0103895 ]\n",
            " [0.00755417]\n",
            " [0.9259487 ]\n",
            " [0.9310071 ]\n",
            " [0.02249159]\n",
            " [0.00636713]\n",
            " [0.01140411]\n",
            " [0.0128642 ]\n",
            " [0.40930825]\n",
            " [0.01618108]\n",
            " [0.01185737]\n",
            " [0.04813585]\n",
            " [0.0145309 ]\n",
            " [0.00725604]\n",
            " [0.01361019]\n",
            " [0.01715044]\n",
            " [0.00704097]\n",
            " [0.01007266]\n",
            " [0.9152438 ]\n",
            " [0.00723739]\n",
            " [0.02222259]\n",
            " [0.00418517]\n",
            " [0.01898673]\n",
            " [0.03859728]\n",
            " [0.09434061]\n",
            " [0.00918256]\n",
            " [0.0086993 ]\n",
            " [0.01116044]\n",
            " [0.00725254]\n",
            " [0.23096853]\n",
            " [0.94728017]\n",
            " [0.25016138]\n",
            " [0.00633404]\n",
            " [0.6817646 ]\n",
            " [0.9382127 ]\n",
            " [0.0151335 ]\n",
            " [0.00727937]\n",
            " [0.00918379]\n",
            " [0.37610567]\n",
            " [0.0142348 ]\n",
            " [0.01991297]\n",
            " [0.0226395 ]\n",
            " [0.9425124 ]\n",
            " [0.0121984 ]\n",
            " [0.8972183 ]\n",
            " [0.00961198]\n",
            " [0.01802881]\n",
            " [0.00562966]\n",
            " [0.933816  ]\n",
            " [0.012565  ]\n",
            " [0.9325315 ]\n",
            " [0.01013787]\n",
            " [0.00527257]\n",
            " [0.8346671 ]\n",
            " [0.90109956]\n",
            " [0.93856657]\n",
            " [0.10013273]\n",
            " [0.05889451]\n",
            " [0.9673315 ]\n",
            " [0.01491707]\n",
            " [0.01540514]\n",
            " [0.01055886]\n",
            " [0.924465  ]\n",
            " [0.908721  ]\n",
            " [0.01114958]\n",
            " [0.00491116]\n",
            " [0.0049258 ]\n",
            " [0.01494306]\n",
            " [0.00756612]\n",
            " [0.01465712]\n",
            " [0.01224925]\n",
            " [0.01112139]\n",
            " [0.9365677 ]\n",
            " [0.00969081]\n",
            " [0.83451635]\n",
            " [0.00817035]\n",
            " [0.00568558]\n",
            " [0.80712885]\n",
            " [0.00798937]\n",
            " [0.79864186]\n",
            " [0.0039858 ]\n",
            " [0.01678192]\n",
            " [0.00696907]\n",
            " [0.9410536 ]\n",
            " [0.02004672]\n",
            " [0.02092363]\n",
            " [0.01037878]\n",
            " [0.01005437]\n",
            " [0.9328973 ]\n",
            " [0.9299803 ]\n",
            " [0.8963841 ]\n",
            " [0.00618803]\n",
            " [0.01264072]\n",
            " [0.00283354]\n",
            " [0.9055406 ]\n",
            " [0.01042882]\n",
            " [0.00892402]\n",
            " [0.00742519]\n",
            " [0.0084996 ]\n",
            " [0.9005715 ]\n",
            " [0.93486696]\n",
            " [0.01365436]\n",
            " [0.01099289]\n",
            " [0.00935675]\n",
            " [0.06419731]\n",
            " [0.00873409]\n",
            " [0.00504364]\n",
            " [0.44553167]\n",
            " [0.9439041 ]\n",
            " [0.00821624]\n",
            " [0.6913406 ]\n",
            " [0.8927924 ]\n",
            " [0.43693995]\n",
            " [0.677114  ]\n",
            " [0.94485766]\n",
            " [0.67091364]\n",
            " [0.00500478]\n",
            " [0.01328783]\n",
            " [0.03968785]\n",
            " [0.00610711]\n",
            " [0.00844664]\n",
            " [0.9540059 ]\n",
            " [0.0141345 ]\n",
            " [0.00887507]\n",
            " [0.00973586]\n",
            " [0.02029076]\n",
            " [0.47558585]\n",
            " [0.9443465 ]\n",
            " [0.01174848]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(Test_pred1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1JbcJN7CQXXG",
        "outputId": "c6ddbb47-a0fd-4bae-d6fb-a165eaeb2117"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "984"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Test_pred2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JF6GfLu5mBt",
        "outputId": "324e15b2-ee2b-4dd8-9503-bff27c0291fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.9815515 ]\n",
            " [0.00466536]\n",
            " [0.02678211]\n",
            " [0.00429671]\n",
            " [0.00427767]\n",
            " [0.00448957]\n",
            " [0.00413648]\n",
            " [0.00457498]\n",
            " [0.00644872]\n",
            " [0.00537176]\n",
            " [0.00438341]\n",
            " [0.00560795]\n",
            " [0.00417305]\n",
            " [0.00447034]\n",
            " [0.00410015]\n",
            " [0.00645574]\n",
            " [0.00477968]\n",
            " [0.02654932]\n",
            " [0.784448  ]\n",
            " [0.00404693]\n",
            " [0.9842515 ]\n",
            " [0.05216152]\n",
            " [0.00539486]\n",
            " [0.9818829 ]\n",
            " [0.00432889]\n",
            " [0.01494304]\n",
            " [0.00678621]\n",
            " [0.00463099]\n",
            " [0.97300315]\n",
            " [0.00452168]\n",
            " [0.00486765]\n",
            " [0.00595468]\n",
            " [0.02675132]\n",
            " [0.00456847]\n",
            " [0.00499675]\n",
            " [0.07564787]\n",
            " [0.00580928]\n",
            " [0.00685171]\n",
            " [0.00567815]\n",
            " [0.00577042]\n",
            " [0.9825663 ]\n",
            " [0.01719104]\n",
            " [0.00499098]\n",
            " [0.00446494]\n",
            " [0.977897  ]\n",
            " [0.0046012 ]\n",
            " [0.9847251 ]\n",
            " [0.98325694]\n",
            " [0.00630714]\n",
            " [0.00546965]\n",
            " [0.00418749]\n",
            " [0.00398587]\n",
            " [0.00546653]\n",
            " [0.9802783 ]\n",
            " [0.6444491 ]\n",
            " [0.00780161]\n",
            " [0.00420103]\n",
            " [0.00526054]\n",
            " [0.00500557]\n",
            " [0.00444334]\n",
            " [0.00532606]\n",
            " [0.00437265]\n",
            " [0.98521954]\n",
            " [0.02968495]\n",
            " [0.00447678]\n",
            " [0.00548254]\n",
            " [0.00461687]\n",
            " [0.00467084]\n",
            " [0.00563222]\n",
            " [0.9762893 ]\n",
            " [0.98793507]\n",
            " [0.00585598]\n",
            " [0.7279759 ]\n",
            " [0.02791917]\n",
            " [0.00484457]\n",
            " [0.0043178 ]\n",
            " [0.00435523]\n",
            " [0.00468526]\n",
            " [0.00748098]\n",
            " [0.9812187 ]\n",
            " [0.00439482]\n",
            " [0.01340932]\n",
            " [0.0044009 ]\n",
            " [0.00443692]\n",
            " [0.00458751]\n",
            " [0.00593787]\n",
            " [0.00660613]\n",
            " [0.00529125]\n",
            " [0.952413  ]\n",
            " [0.00708076]\n",
            " [0.00480865]\n",
            " [0.80236197]\n",
            " [0.98520285]\n",
            " [0.01022327]\n",
            " [0.00475284]\n",
            " [0.8102139 ]\n",
            " [0.02931396]\n",
            " [0.97359   ]\n",
            " [0.00506571]\n",
            " [0.00649276]\n",
            " [0.00724789]\n",
            " [0.00489093]\n",
            " [0.9795186 ]\n",
            " [0.00625322]\n",
            " [0.00401812]\n",
            " [0.00421098]\n",
            " [0.00444694]\n",
            " [0.00603636]\n",
            " [0.00436831]\n",
            " [0.9865344 ]\n",
            " [0.00555757]\n",
            " [0.9832622 ]\n",
            " [0.01856372]\n",
            " [0.00508485]\n",
            " [0.00458577]\n",
            " [0.00651954]\n",
            " [0.00562677]\n",
            " [0.00429229]\n",
            " [0.98248124]\n",
            " [0.0043361 ]\n",
            " [0.00560585]\n",
            " [0.00443306]\n",
            " [0.98675805]\n",
            " [0.9850312 ]\n",
            " [0.00492127]\n",
            " [0.00454917]\n",
            " [0.9859806 ]\n",
            " [0.00784113]\n",
            " [0.9575298 ]\n",
            " [0.00431997]\n",
            " [0.9647267 ]\n",
            " [0.00418834]\n",
            " [0.02688108]\n",
            " [0.00539933]\n",
            " [0.0128053 ]\n",
            " [0.0048388 ]\n",
            " [0.04082884]\n",
            " [0.6236516 ]\n",
            " [0.9626267 ]\n",
            " [0.00430705]\n",
            " [0.29726422]\n",
            " [0.0041535 ]\n",
            " [0.00643298]\n",
            " [0.00666876]\n",
            " [0.00502803]\n",
            " [0.0049463 ]\n",
            " [0.01210034]\n",
            " [0.0173883 ]\n",
            " [0.02266988]\n",
            " [0.00467946]\n",
            " [0.26950312]\n",
            " [0.9817644 ]\n",
            " [0.00493155]\n",
            " [0.005326  ]\n",
            " [0.0149837 ]\n",
            " [0.00443192]\n",
            " [0.98526686]\n",
            " [0.02225602]\n",
            " [0.00493901]\n",
            " [0.00655856]\n",
            " [0.00498098]\n",
            " [0.9857724 ]\n",
            " [0.00470354]\n",
            " [0.01634904]\n",
            " [0.01678398]\n",
            " [0.00518271]\n",
            " [0.0198104 ]\n",
            " [0.00404661]\n",
            " [0.00434771]\n",
            " [0.00483276]\n",
            " [0.0044936 ]\n",
            " [0.00455557]\n",
            " [0.00470056]\n",
            " [0.98633933]\n",
            " [0.00456881]\n",
            " [0.00896267]\n",
            " [0.00424202]\n",
            " [0.9850609 ]\n",
            " [0.00427093]\n",
            " [0.00498562]\n",
            " [0.00532344]\n",
            " [0.00485664]\n",
            " [0.98324484]\n",
            " [0.9854692 ]\n",
            " [0.00555429]\n",
            " [0.00659119]\n",
            " [0.00634323]\n",
            " [0.37148392]\n",
            " [0.00515071]\n",
            " [0.00473333]\n",
            " [0.00446738]\n",
            " [0.00515976]\n",
            " [0.00527821]\n",
            " [0.00582222]\n",
            " [0.93433213]\n",
            " [0.00543584]\n",
            " [0.0043231 ]\n",
            " [0.00584071]\n",
            " [0.00449545]\n",
            " [0.00879754]\n",
            " [0.9812838 ]\n",
            " [0.00624229]\n",
            " [0.9874371 ]\n",
            " [0.85087603]\n",
            " [0.00482843]\n",
            " [0.00432355]\n",
            " [0.00457709]\n",
            " [0.9875035 ]\n",
            " [0.00639925]\n",
            " [0.00764919]\n",
            " [0.00454821]\n",
            " [0.821518  ]\n",
            " [0.00685756]\n",
            " [0.02393607]\n",
            " [0.98652303]\n",
            " [0.00484987]\n",
            " [0.00415759]\n",
            " [0.98638076]\n",
            " [0.98370844]\n",
            " [0.00442102]\n",
            " [0.95444715]\n",
            " [0.98335254]\n",
            " [0.0059218 ]\n",
            " [0.00440122]\n",
            " [0.8330314 ]\n",
            " [0.9220275 ]\n",
            " [0.9837189 ]\n",
            " [0.98341805]\n",
            " [0.98449457]\n",
            " [0.00494512]\n",
            " [0.9772145 ]\n",
            " [0.00517422]\n",
            " [0.980988  ]\n",
            " [0.986312  ]\n",
            " [0.00738245]\n",
            " [0.00535434]\n",
            " [0.9865255 ]\n",
            " [0.00460447]\n",
            " [0.98588985]\n",
            " [0.02766113]\n",
            " [0.90986323]\n",
            " [0.00543952]\n",
            " [0.00457251]\n",
            " [0.00559765]\n",
            " [0.00430932]\n",
            " [0.00858489]\n",
            " [0.00675002]\n",
            " [0.00632689]\n",
            " [0.00532393]\n",
            " [0.0053003 ]\n",
            " [0.00569795]\n",
            " [0.00476133]\n",
            " [0.98885185]\n",
            " [0.00476461]\n",
            " [0.00504024]\n",
            " [0.98356295]\n",
            " [0.00511138]\n",
            " [0.00449167]\n",
            " [0.00449372]\n",
            " [0.00508709]\n",
            " [0.00480396]\n",
            " [0.00498385]\n",
            " [0.00482865]\n",
            " [0.00610255]\n",
            " [0.98179924]\n",
            " [0.00631928]\n",
            " [0.00601492]\n",
            " [0.00443947]\n",
            " [0.00484284]\n",
            " [0.00532208]\n",
            " [0.9841292 ]\n",
            " [0.98891187]\n",
            " [0.00560869]\n",
            " [0.00459602]\n",
            " [0.00473709]\n",
            " [0.00422103]\n",
            " [0.9809145 ]\n",
            " [0.00577085]\n",
            " [0.0040207 ]\n",
            " [0.00529767]\n",
            " [0.00813321]\n",
            " [0.0053747 ]\n",
            " [0.00444696]\n",
            " [0.00515285]\n",
            " [0.00481606]\n",
            " [0.96414757]\n",
            " [0.00432518]\n",
            " [0.00977974]\n",
            " [0.00417884]\n",
            " [0.98343843]\n",
            " [0.00444269]\n",
            " [0.00493422]\n",
            " [0.9854775 ]\n",
            " [0.96343845]\n",
            " [0.00461805]\n",
            " [0.00448671]\n",
            " [0.00489735]\n",
            " [0.01058799]\n",
            " [0.01125071]\n",
            " [0.01849237]\n",
            " [0.00527909]\n",
            " [0.00589058]\n",
            " [0.00444995]\n",
            " [0.98258543]\n",
            " [0.9800179 ]\n",
            " [0.0048061 ]\n",
            " [0.8130026 ]\n",
            " [0.00458471]\n",
            " [0.98205566]\n",
            " [0.7284232 ]\n",
            " [0.00441193]\n",
            " [0.00404513]\n",
            " [0.00427181]\n",
            " [0.00594449]\n",
            " [0.00745942]\n",
            " [0.00400633]\n",
            " [0.00456126]\n",
            " [0.00442637]\n",
            " [0.00714491]\n",
            " [0.00480985]\n",
            " [0.68760157]\n",
            " [0.00448546]\n",
            " [0.00444734]\n",
            " [0.9772199 ]\n",
            " [0.01109578]\n",
            " [0.00451676]\n",
            " [0.00470855]\n",
            " [0.00505314]\n",
            " [0.00510036]\n",
            " [0.0051339 ]\n",
            " [0.983945  ]\n",
            " [0.00499785]\n",
            " [0.00603602]\n",
            " [0.00428088]\n",
            " [0.9464323 ]\n",
            " [0.98057103]\n",
            " [0.00410132]\n",
            " [0.00475608]\n",
            " [0.00416654]\n",
            " [0.98587584]\n",
            " [0.0051118 ]\n",
            " [0.01238668]\n",
            " [0.00565764]\n",
            " [0.84834313]\n",
            " [0.00484739]\n",
            " [0.00451258]\n",
            " [0.9694912 ]\n",
            " [0.00536646]\n",
            " [0.97926867]\n",
            " [0.00436847]\n",
            " [0.00472029]\n",
            " [0.9833204 ]\n",
            " [0.01973256]\n",
            " [0.00881859]\n",
            " [0.00513416]\n",
            " [0.00450147]\n",
            " [0.01848922]\n",
            " [0.00536844]\n",
            " [0.96426094]\n",
            " [0.00405433]\n",
            " [0.9875603 ]\n",
            " [0.00510601]\n",
            " [0.00433916]\n",
            " [0.00449812]\n",
            " [0.00440543]\n",
            " [0.00500178]\n",
            " [0.00548405]\n",
            " [0.00510078]\n",
            " [0.9493155 ]\n",
            " [0.00645023]\n",
            " [0.00491745]\n",
            " [0.94198024]\n",
            " [0.00521885]\n",
            " [0.00487806]\n",
            " [0.01983575]\n",
            " [0.00438289]\n",
            " [0.00460946]\n",
            " [0.00612274]\n",
            " [0.00502277]\n",
            " [0.9848904 ]\n",
            " [0.00987587]\n",
            " [0.02687002]\n",
            " [0.00420972]\n",
            " [0.02309145]\n",
            " [0.01666089]\n",
            " [0.00607514]\n",
            " [0.00453717]\n",
            " [0.00439645]\n",
            " [0.00698926]\n",
            " [0.00599105]\n",
            " [0.00583225]\n",
            " [0.00470812]\n",
            " [0.8119796 ]\n",
            " [0.0182164 ]\n",
            " [0.00427588]\n",
            " [0.0067309 ]\n",
            " [0.983878  ]\n",
            " [0.00525741]\n",
            " [0.00819758]\n",
            " [0.01365157]\n",
            " [0.0054591 ]\n",
            " [0.9830513 ]\n",
            " [0.11189407]\n",
            " [0.00520643]\n",
            " [0.00540305]\n",
            " [0.00473592]\n",
            " [0.00422427]\n",
            " [0.00636258]\n",
            " [0.00768029]\n",
            " [0.00444886]\n",
            " [0.00854404]\n",
            " [0.43564698]\n",
            " [0.01011185]\n",
            " [0.00619524]\n",
            " [0.00922345]\n",
            " [0.00459405]\n",
            " [0.00547288]\n",
            " [0.7540766 ]\n",
            " [0.98543644]\n",
            " [0.00480704]\n",
            " [0.00567882]\n",
            " [0.00519733]\n",
            " [0.9766956 ]\n",
            " [0.00434654]\n",
            " [0.00428581]\n",
            " [0.00473618]\n",
            " [0.0050788 ]\n",
            " [0.98822105]\n",
            " [0.00513791]\n",
            " [0.00535313]\n",
            " [0.00484138]\n",
            " [0.00475383]\n",
            " [0.00598873]\n",
            " [0.00422632]\n",
            " [0.00445314]\n",
            " [0.00453504]\n",
            " [0.00518986]\n",
            " [0.9864969 ]\n",
            " [0.00478673]\n",
            " [0.90937454]\n",
            " [0.00639425]\n",
            " [0.98286146]\n",
            " [0.00989867]\n",
            " [0.00465019]\n",
            " [0.00402094]\n",
            " [0.00441357]\n",
            " [0.9830137 ]\n",
            " [0.00438681]\n",
            " [0.0044721 ]\n",
            " [0.00482045]\n",
            " [0.00920272]\n",
            " [0.00457129]\n",
            " [0.00481782]\n",
            " [0.00415173]\n",
            " [0.0050979 ]\n",
            " [0.0061249 ]\n",
            " [0.9852191 ]\n",
            " [0.00415999]\n",
            " [0.98614377]\n",
            " [0.004171  ]\n",
            " [0.0067141 ]\n",
            " [0.00539591]\n",
            " [0.00462219]\n",
            " [0.9700635 ]\n",
            " [0.9817858 ]\n",
            " [0.98504525]\n",
            " [0.00468746]\n",
            " [0.00451177]\n",
            " [0.00484463]\n",
            " [0.00457427]\n",
            " [0.9540862 ]\n",
            " [0.01073838]\n",
            " [0.00490241]\n",
            " [0.00459166]\n",
            " [0.48624346]\n",
            " [0.00465486]\n",
            " [0.00420107]\n",
            " [0.00635883]\n",
            " [0.31515527]\n",
            " [0.08247079]\n",
            " [0.00434569]\n",
            " [0.00453778]\n",
            " [0.00425658]\n",
            " [0.00470127]\n",
            " [0.00613811]\n",
            " [0.9841945 ]\n",
            " [0.01050343]\n",
            " [0.00432025]\n",
            " [0.01278333]\n",
            " [0.00458095]\n",
            " [0.00932184]\n",
            " [0.00427373]\n",
            " [0.00898206]\n",
            " [0.00602957]\n",
            " [0.00431391]\n",
            " [0.00460159]\n",
            " [0.00489035]\n",
            " [0.00555251]\n",
            " [0.00447609]\n",
            " [0.00502017]\n",
            " [0.00529702]\n",
            " [0.0071965 ]\n",
            " [0.00473267]\n",
            " [0.00465649]\n",
            " [0.00497542]\n",
            " [0.01716557]\n",
            " [0.00555777]\n",
            " [0.0044125 ]\n",
            " [0.00463706]\n",
            " [0.00515953]\n",
            " [0.00437812]\n",
            " [0.00520803]\n",
            " [0.00532318]\n",
            " [0.00825924]\n",
            " [0.00461566]\n",
            " [0.00661023]\n",
            " [0.98331004]\n",
            " [0.91006637]\n",
            " [0.00477472]\n",
            " [0.02672029]\n",
            " [0.00483418]\n",
            " [0.00432428]\n",
            " [0.00450428]\n",
            " [0.00466648]\n",
            " [0.00432944]\n",
            " [0.01883941]\n",
            " [0.004454  ]\n",
            " [0.00518107]\n",
            " [0.9631282 ]\n",
            " [0.00514818]\n",
            " [0.00490884]\n",
            " [0.00456225]\n",
            " [0.00436355]\n",
            " [0.00451305]\n",
            " [0.00518642]\n",
            " [0.0052986 ]\n",
            " [0.9788933 ]\n",
            " [0.00495299]\n",
            " [0.00445114]\n",
            " [0.00423615]\n",
            " [0.98517245]\n",
            " [0.48678577]\n",
            " [0.03318189]\n",
            " [0.9833405 ]\n",
            " [0.9636839 ]\n",
            " [0.9843922 ]\n",
            " [0.00418706]\n",
            " [0.00503834]\n",
            " [0.00565485]\n",
            " [0.00476267]\n",
            " [0.9441977 ]\n",
            " [0.44297224]\n",
            " [0.9875348 ]\n",
            " [0.00761652]\n",
            " [0.96079504]\n",
            " [0.00468034]\n",
            " [0.00459107]\n",
            " [0.00484817]\n",
            " [0.9863301 ]\n",
            " [0.00473059]\n",
            " [0.00543246]\n",
            " [0.00472098]\n",
            " [0.00444351]\n",
            " [0.9810901 ]\n",
            " [0.10542643]\n",
            " [0.02360865]\n",
            " [0.00560906]\n",
            " [0.00420135]\n",
            " [0.00444743]\n",
            " [0.5075164 ]\n",
            " [0.9642235 ]\n",
            " [0.00692368]\n",
            " [0.00481239]\n",
            " [0.985557  ]\n",
            " [0.00582028]\n",
            " [0.00430687]\n",
            " [0.00626929]\n",
            " [0.9841224 ]\n",
            " [0.98130864]\n",
            " [0.6011059 ]\n",
            " [0.9470843 ]\n",
            " [0.01095014]\n",
            " [0.00551958]\n",
            " [0.00400654]\n",
            " [0.00464065]\n",
            " [0.00580102]\n",
            " [0.00439225]\n",
            " [0.03655801]\n",
            " [0.00496419]\n",
            " [0.00507312]\n",
            " [0.00527991]\n",
            " [0.9861933 ]\n",
            " [0.05515124]\n",
            " [0.00791074]\n",
            " [0.00471137]\n",
            " [0.9781531 ]\n",
            " [0.00531193]\n",
            " [0.86163753]\n",
            " [0.98114294]\n",
            " [0.00418451]\n",
            " [0.9811083 ]\n",
            " [0.98270446]\n",
            " [0.9799628 ]\n",
            " [0.004806  ]\n",
            " [0.00570159]\n",
            " [0.00511069]\n",
            " [0.9840049 ]\n",
            " [0.00483411]\n",
            " [0.00467809]\n",
            " [0.00506041]\n",
            " [0.0055956 ]\n",
            " [0.01267538]\n",
            " [0.00599774]\n",
            " [0.00448753]\n",
            " [0.00472539]\n",
            " [0.00516227]\n",
            " [0.98446625]\n",
            " [0.0060714 ]\n",
            " [0.00780152]\n",
            " [0.01244464]\n",
            " [0.00515645]\n",
            " [0.89723295]\n",
            " [0.00440195]\n",
            " [0.00411369]\n",
            " [0.00594607]\n",
            " [0.00442871]\n",
            " [0.9808727 ]\n",
            " [0.00541967]\n",
            " [0.00800619]\n",
            " [0.9793847 ]\n",
            " [0.00515158]\n",
            " [0.00801445]\n",
            " [0.9568361 ]\n",
            " [0.0040795 ]\n",
            " [0.00726596]\n",
            " [0.00396155]\n",
            " [0.00432073]\n",
            " [0.00484891]\n",
            " [0.00473454]\n",
            " [0.00532205]\n",
            " [0.00495044]\n",
            " [0.00487219]\n",
            " [0.00481159]\n",
            " [0.00467003]\n",
            " [0.02228651]\n",
            " [0.95363396]\n",
            " [0.89075106]\n",
            " [0.00453464]\n",
            " [0.0068382 ]\n",
            " [0.25842056]\n",
            " [0.9847259 ]\n",
            " [0.00468715]\n",
            " [0.36872175]\n",
            " [0.982737  ]\n",
            " [0.00432671]\n",
            " [0.00519848]\n",
            " [0.00434135]\n",
            " [0.00459711]\n",
            " [0.00451206]\n",
            " [0.9884054 ]\n",
            " [0.00482432]\n",
            " [0.06807707]\n",
            " [0.00441485]\n",
            " [0.00604869]\n",
            " [0.00578803]\n",
            " [0.00601961]\n",
            " [0.00409275]\n",
            " [0.00468554]\n",
            " [0.61423457]\n",
            " [0.00626846]\n",
            " [0.00406667]\n",
            " [0.00431842]\n",
            " [0.9326726 ]\n",
            " [0.9847845 ]\n",
            " [0.91775155]\n",
            " [0.01228253]\n",
            " [0.9011404 ]\n",
            " [0.96072686]\n",
            " [0.00459866]\n",
            " [0.00706677]\n",
            " [0.00549149]\n",
            " [0.00429701]\n",
            " [0.00629141]\n",
            " [0.00452721]\n",
            " [0.00480472]\n",
            " [0.01096586]\n",
            " [0.98678726]\n",
            " [0.00506198]\n",
            " [0.00486972]\n",
            " [0.00441984]\n",
            " [0.00430786]\n",
            " [0.00462269]\n",
            " [0.0050178 ]\n",
            " [0.00471874]\n",
            " [0.9872322 ]\n",
            " [0.98273754]\n",
            " [0.00455434]\n",
            " [0.00453982]\n",
            " [0.00481217]\n",
            " [0.0043356 ]\n",
            " [0.98594326]\n",
            " [0.00635941]\n",
            " [0.00499399]\n",
            " [0.0046952 ]\n",
            " [0.0041581 ]\n",
            " [0.00520386]\n",
            " [0.00528944]\n",
            " [0.00493217]\n",
            " [0.98351806]\n",
            " [0.00522543]\n",
            " [0.00512745]\n",
            " [0.00565855]\n",
            " [0.00649588]\n",
            " [0.9852025 ]\n",
            " [0.00447172]\n",
            " [0.00458095]\n",
            " [0.00518693]\n",
            " [0.00474347]\n",
            " [0.00422901]\n",
            " [0.00400481]\n",
            " [0.00463923]\n",
            " [0.00410801]\n",
            " [0.0048272 ]\n",
            " [0.00404546]\n",
            " [0.00457082]\n",
            " [0.00983129]\n",
            " [0.03054419]\n",
            " [0.00509226]\n",
            " [0.00412503]\n",
            " [0.00468156]\n",
            " [0.8948648 ]\n",
            " [0.00564559]\n",
            " [0.0046192 ]\n",
            " [0.00478204]\n",
            " [0.9840232 ]\n",
            " [0.00509192]\n",
            " [0.01186228]\n",
            " [0.00513897]\n",
            " [0.9814828 ]\n",
            " [0.00437161]\n",
            " [0.00451058]\n",
            " [0.981484  ]\n",
            " [0.05143323]\n",
            " [0.00474103]\n",
            " [0.983624  ]\n",
            " [0.00471275]\n",
            " [0.00800926]\n",
            " [0.00497238]\n",
            " [0.004727  ]\n",
            " [0.00530854]\n",
            " [0.00485806]\n",
            " [0.00921442]\n",
            " [0.19124128]\n",
            " [0.0060139 ]\n",
            " [0.12659214]\n",
            " [0.9556307 ]\n",
            " [0.00521422]\n",
            " [0.00725313]\n",
            " [0.9840437 ]\n",
            " [0.00608885]\n",
            " [0.36580405]\n",
            " [0.9840694 ]\n",
            " [0.00464973]\n",
            " [0.00451007]\n",
            " [0.9872474 ]\n",
            " [0.0044431 ]\n",
            " [0.98224807]\n",
            " [0.9855888 ]\n",
            " [0.00457114]\n",
            " [0.00434606]\n",
            " [0.00465591]\n",
            " [0.00484345]\n",
            " [0.00513082]\n",
            " [0.9852292 ]\n",
            " [0.00451579]\n",
            " [0.9850563 ]\n",
            " [0.9825089 ]\n",
            " [0.00529942]\n",
            " [0.00494846]\n",
            " [0.00555726]\n",
            " [0.022416  ]\n",
            " [0.00453793]\n",
            " [0.98580706]\n",
            " [0.00572072]\n",
            " [0.0041822 ]\n",
            " [0.0096783 ]\n",
            " [0.3300536 ]\n",
            " [0.00697818]\n",
            " [0.00447845]\n",
            " [0.01824441]\n",
            " [0.00837608]\n",
            " [0.00477749]\n",
            " [0.00491975]\n",
            " [0.00422196]\n",
            " [0.00477225]\n",
            " [0.00542686]\n",
            " [0.00637433]\n",
            " [0.02337781]\n",
            " [0.00556028]\n",
            " [0.00450091]\n",
            " [0.00512484]\n",
            " [0.58272964]\n",
            " [0.00428097]\n",
            " [0.00508354]\n",
            " [0.9829753 ]\n",
            " [0.0077343 ]\n",
            " [0.02537104]\n",
            " [0.00747789]\n",
            " [0.39863864]\n",
            " [0.00415707]\n",
            " [0.9856515 ]\n",
            " [0.01134166]\n",
            " [0.00490947]\n",
            " [0.97953105]\n",
            " [0.00452555]\n",
            " [0.0269469 ]\n",
            " [0.9733911 ]\n",
            " [0.9741889 ]\n",
            " [0.96744174]\n",
            " [0.98181546]\n",
            " [0.00542166]\n",
            " [0.00599303]\n",
            " [0.98670673]\n",
            " [0.0045195 ]\n",
            " [0.98325187]\n",
            " [0.9538099 ]\n",
            " [0.00463361]\n",
            " [0.00596236]\n",
            " [0.00967006]\n",
            " [0.00438252]\n",
            " [0.02424909]\n",
            " [0.00737594]\n",
            " [0.00425553]\n",
            " [0.00447179]\n",
            " [0.00950774]\n",
            " [0.00527758]\n",
            " [0.00429014]\n",
            " [0.00528339]\n",
            " [0.00614042]\n",
            " [0.00493966]\n",
            " [0.00469659]\n",
            " [0.00982879]\n",
            " [0.9453246 ]\n",
            " [0.00528399]\n",
            " [0.02272648]\n",
            " [0.9469415 ]\n",
            " [0.00471195]\n",
            " [0.00428391]\n",
            " [0.0411633 ]\n",
            " [0.0099229 ]\n",
            " [0.00408484]\n",
            " [0.00697091]\n",
            " [0.98229164]\n",
            " [0.0047089 ]\n",
            " [0.0066869 ]\n",
            " [0.00524644]\n",
            " [0.00460017]\n",
            " [0.98077124]\n",
            " [0.9815575 ]\n",
            " [0.00649513]\n",
            " [0.00454206]\n",
            " [0.00520103]\n",
            " [0.00545536]\n",
            " [0.13238367]\n",
            " [0.00561397]\n",
            " [0.00506509]\n",
            " [0.00985204]\n",
            " [0.00524394]\n",
            " [0.00416498]\n",
            " [0.00524   ]\n",
            " [0.00552016]\n",
            " [0.00440234]\n",
            " [0.00503825]\n",
            " [0.987136  ]\n",
            " [0.0047803 ]\n",
            " [0.00750283]\n",
            " [0.00464841]\n",
            " [0.00583955]\n",
            " [0.01099577]\n",
            " [0.0146545 ]\n",
            " [0.00485348]\n",
            " [0.00497456]\n",
            " [0.00435154]\n",
            " [0.00439296]\n",
            " [0.7344589 ]\n",
            " [0.9841271 ]\n",
            " [0.07116576]\n",
            " [0.00454834]\n",
            " [0.9278396 ]\n",
            " [0.9833973 ]\n",
            " [0.00547022]\n",
            " [0.01773254]\n",
            " [0.00471667]\n",
            " [0.9306813 ]\n",
            " [0.00505466]\n",
            " [0.00635932]\n",
            " [0.00638875]\n",
            " [0.9840781 ]\n",
            " [0.00490101]\n",
            " [0.9831531 ]\n",
            " [0.0048542 ]\n",
            " [0.0058225 ]\n",
            " [0.0043617 ]\n",
            " [0.9841708 ]\n",
            " [0.00506831]\n",
            " [0.9854666 ]\n",
            " [0.0045859 ]\n",
            " [0.0041872 ]\n",
            " [0.98128074]\n",
            " [0.983603  ]\n",
            " [0.98478675]\n",
            " [0.01391709]\n",
            " [0.01454203]\n",
            " [0.9853028 ]\n",
            " [0.00606532]\n",
            " [0.0061774 ]\n",
            " [0.00479393]\n",
            " [0.9807828 ]\n",
            " [0.9719274 ]\n",
            " [0.00446305]\n",
            " [0.00419816]\n",
            " [0.00428542]\n",
            " [0.00590378]\n",
            " [0.00458019]\n",
            " [0.00529845]\n",
            " [0.00507903]\n",
            " [0.00546307]\n",
            " [0.9806559 ]\n",
            " [0.00484358]\n",
            " [0.97510266]\n",
            " [0.00456322]\n",
            " [0.00403216]\n",
            " [0.91632116]\n",
            " [0.00432512]\n",
            " [0.9412376 ]\n",
            " [0.0043367 ]\n",
            " [0.0051356 ]\n",
            " [0.00461402]\n",
            " [0.985536  ]\n",
            " [0.00619811]\n",
            " [0.00689252]\n",
            " [0.00469162]\n",
            " [0.00481202]\n",
            " [0.98609143]\n",
            " [0.97882044]\n",
            " [0.98093915]\n",
            " [0.0045305 ]\n",
            " [0.01132347]\n",
            " [0.00412608]\n",
            " [0.9822898 ]\n",
            " [0.00485722]\n",
            " [0.00506979]\n",
            " [0.005397  ]\n",
            " [0.00458895]\n",
            " [0.96425676]\n",
            " [0.9855656 ]\n",
            " [0.00520039]\n",
            " [0.00474367]\n",
            " [0.00470808]\n",
            " [0.680358  ]\n",
            " [0.0049356 ]\n",
            " [0.00466965]\n",
            " [0.16761455]\n",
            " [0.985115  ]\n",
            " [0.00420214]\n",
            " [0.8110938 ]\n",
            " [0.9694613 ]\n",
            " [0.9283007 ]\n",
            " [0.859517  ]\n",
            " [0.9878705 ]\n",
            " [0.9265842 ]\n",
            " [0.00431669]\n",
            " [0.0051853 ]\n",
            " [0.03124143]\n",
            " [0.00413751]\n",
            " [0.00464094]\n",
            " [0.98622125]\n",
            " [0.00508912]\n",
            " [0.00453735]\n",
            " [0.00467236]\n",
            " [0.00594398]\n",
            " [0.7038963 ]\n",
            " [0.9857548 ]\n",
            " [0.00478893]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data['content'][2] ,Train_pred1[2],Train_pred2[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hAFj2M57QPFU",
        "outputId": "6b6ed2b7-4806-4799-c063-91e980fed744"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "June 2015 I went on a small trip around Asia and I had 5 flight with AirAsia: HK-KL, KL-Jakarta, Jakarta-Singapore, Singapore-Bangkok, Bangkok-Xi'an. Beforehand, I read some reviews about AirAsia online and 99% of them were really bad. Everyone was complaining about delayed/changed flight and poor customer service. After all I read, I expected awful flight but in fact everything went smoothly. All flight were on time (except one - 2 hour delay) and customer service was good. And yes, you have to pay for drinks and food on board but come on, I got 5 flight around Asia for less than £200 altogether. I would fly with AirAsia again! [0.01195483] [0.0050908]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data['content'][4969] ,Test_pred1[983],Test_pred2[983] )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEaZt2x3abri",
        "outputId": "341c24ad-eb25-4464-f632-49e71cc640e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Never heard of this airline until I flew in July on Embraer 190 from Tianjin to Ningbo but impressed by service standards. At the airport the check in and boarding was quick and efficient and FA's were very attentive. Okay their English language skills need improving but never seen such an efficient and smiling set of FA's. Seats comfortable for this quite short trip meal was also good - lack of newspapers though. Will fly them again in September and woulkd have no doubts about recommending them to others as a must-try airline. [0.01174848] [0.00478893]\n"
          ]
        }
      ]
    }
  ]
}
